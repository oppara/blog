<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>Posts on d.oppara.tv</title><link>https://d.oppara.tv/posts/</link><description>Recent content in Posts on d.oppara.tv</description><generator>Hugo -- gohugo.io</generator><language>ja</language><lastBuildDate>Mon, 29 Jan 2024 07:21:41 +0900</lastBuildDate><atom:link href="https://d.oppara.tv/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Intel One Mono を使う</title><link>https://d.oppara.tv/posts/2024/01/font-intel-one-mono/</link><pubDate>Mon, 29 Jan 2024 07:21:41 +0900</pubDate><guid>https://d.oppara.tv/posts/2024/01/font-intel-one-mono/</guid><description>はじめに 中括弧（{}）が特徴的な、Intel One Mono を使ってみる。 インストール % install homebrew/cask-fonts/font-intel-one-mono 環境 % sw_vers ProductName: macOS ProductVersion: 14.2.1 BuildVersion: 23C71 % brew --version Homebrew 4.2.5</description></item><item><title>AWS CLIからテストメールを送信</title><link>https://d.oppara.tv/posts/2024/01/aws-ses-cli-send-email/</link><pubDate>Sat, 27 Jan 2024 14:55:28 +0900</pubDate><guid>https://d.oppara.tv/posts/2024/01/aws-ses-cli-send-email/</guid><description>はじめに AWS CLIからテストメールを送信する方法を備忘録。 手順 $ to=&amp;#34;test@example.com&amp;#34; $ aws ses send-email \ --from info@oppara.tv \ --to &amp;#34;${to}&amp;#34; \ --subject &amp;#34;件名&amp;#34; \ --text &amp;#34;本文&amp;#34;</description></item><item><title>ローカルで Web サーバーを立てる</title><link>https://d.oppara.tv/posts/2024/01/localserver/</link><pubDate>Wed, 10 Jan 2024 08:57:54 +0900</pubDate><guid>https://d.oppara.tv/posts/2024/01/localserver/</guid><description>Node.js npx serve port 指定する場合。 npx serve -p 1192 serve - npm Python python -m http.server 1192 http.server &amp;mdash; HTTP サーバ — Python 3.10.13 ドキュメント PHP php -S localhost:1192 PHP: ビルトインウェブサーバー - Manual まとめ 静的コンテンツは node で</description></item><item><title>CLI で Aurora Serverless V1 を作成する</title><link>https://d.oppara.tv/posts/2023/11/aws-aurora-serverless-v1/</link><pubDate>Sat, 25 Nov 2023 10:33:23 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/11/aws-aurora-serverless-v1/</guid><description>はじめに マネジメントコンソールで Aurora Serverless V1 を作成できないので、AWS CLI の覚書。 手順 DATABASE_NAME=&amp;#34;try_db&amp;#34; DB_CLUSTER_IDENTIFIER=&amp;#34;try-cluster&amp;#34; VPC_SECURITY_GROUP_IDS=&amp;#34;sg-016afba3d02181db5&amp;#34; MASTER_USERNAME=&amp;#34;admin&amp;#34; MASTER_USER_PASSWORD=&amp;#34;p4ssw0rd&amp;#34; DB_SUBNET_GROUP_NAME=&amp;#34;try-db-subnet-group&amp;#34; aws rds create-db-cluster \ --database-name &amp;#34;${DATABASE_NAME}&amp;#34; \ --db-cluster-identifier &amp;#34;${DB_CLUSTER_IDENTIFIER}&amp;#34; \ --vpc-security-group-ids &amp;#34;${VPC_SECURITY_GROUP_IDS}&amp;#34; \ --master-username &amp;#34;${MASTER_USERNAME}&amp;#34; \ --master-user-password &amp;#34;${MASTER_USER_PASSWORD}&amp;#34; \ --db-subnet-group-name &amp;#34;${DB_SUBNET_GROUP_NAME}&amp;#34; \ --availability-zones ap-northeast-1a ap-northeast-1c</description></item><item><title>Next.js で Basic 認証をかける</title><link>https://d.oppara.tv/posts/2023/11/nextjs-basic-auth/</link><pubDate>Mon, 20 Nov 2023 06:32:13 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/11/nextjs-basic-auth/</guid><description>対応方法 middleware を使用する。 // middleware.ts import { NextResponse, NextRequest } from &amp;#39;next/server&amp;#39;; export const config = { // /hoge/ 以下のパスに対して Basic 認証をかける matcher: [&amp;#39;/hoge/:path*&amp;#39;], } export function middleware(req: NextRequest) { const basicAuth = req.headers.get(&amp;#39;authorization&amp;#39;); if (basicAuth) { const authValue = basicAuth.split(&amp;#39; &amp;#39;)[1]; const [user, password] = atob(authValue).split(&amp;#39;:&amp;#39;); if (user</description></item><item><title>Next.js で IP アドレスを使用したアクセス制限を行う</title><link>https://d.oppara.tv/posts/2023/11/nextjs-restrict-access-by-ip-address/</link><pubDate>Mon, 20 Nov 2023 06:22:12 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/11/nextjs-restrict-access-by-ip-address/</guid><description>対応方法 middleware を使用する。 // middleware.ts import { NextResponse, NextRequest } from &amp;#39;next/server&amp;#39;; const validAddresses = new Set(); if (process.env.VALID_IP_ADDRESSES) { process.env.VALID_IP_ADDRESSES!.split(&amp;#39;,&amp;#39;).forEach((address) =&amp;gt; { validAddresses.add(address.trim()); }) } export function middleware(req: NextRequest) { let ip: string = req.ip ?? req.headers.get(&amp;#39;x-real-ip&amp;#39;) ?? &amp;#39;&amp;#39;; // with CDN or LB or next dev if (!ip &amp;amp;&amp;amp; req.headers.get(&amp;#39;x-forwarded-for&amp;#39;)) { ip = req.headers.get(&amp;#39;x-forwarded-for&amp;#39;)?.split(&amp;#39;,&amp;#39;)[0] ?? &amp;#39;&amp;#39;; } if (!validAddresses.has(ip)) {</description></item><item><title>ログローテートの覚書</title><link>https://d.oppara.tv/posts/2023/11/logrotate/</link><pubDate>Mon, 06 Nov 2023 10:53:51 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/11/logrotate/</guid><description>はじめに ログローテートの dry-run、実行方法についての覚書。 Usage dry-run 実行 logrotate -d /etc/logrotate.conf 実行 logrotate -f /etc/logrotate.conf 設定ファイルを指定して実行 logrotate -f /etc/logrotate.d/httpd</description></item><item><title>textlint で dry run</title><link>https://d.oppara.tv/posts/2023/10/textlint-dryrun/</link><pubDate>Thu, 19 Oct 2023 07:33:30 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/10/textlint-dryrun/</guid><description>はじめに textlint の dry-run をよく忘れるので覚書。 そもそもデフォルトが dry-run だった。 Usage npx textlint /path/to/target キャッシュなし、設定ファイル指定の場合。 npx textlint --no-cache -c /path/to/textlintrc /path/to/target 自動修正時の場</description></item><item><title>stree を使ってみる</title><link>https://d.oppara.tv/posts/2023/10/aws-s3-stree/</link><pubDate>Mon, 09 Oct 2023 10:24:59 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/10/aws-s3-stree/</guid><description>はじめに 便利そうなので使ってみる。 orangekame3/stree: 📁Directory trees of AWS S3 Bucket stree：S3バケットをtreeするCLIコマンド | フューチャー技術ブロ</description></item><item><title>シェルスクリプトで Usage 表示</title><link>https://d.oppara.tv/posts/2023/10/shellscript-usage/</link><pubDate>Thu, 05 Oct 2023 22:22:24 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/10/shellscript-usage/</guid><description>はじめに 簡易敵な Usage 表示 実装 #!/usr/bin/env bash #/ Usage: #/ awsome-script [-h | -help] &amp;lt;name&amp;gt; [&amp;lt;count&amp;gt;] #/ #/ Example #/ awsome-script foo #/ awsome-script foo 3 #/ set -e usage () { grep &amp;#39;^#/&amp;#39; &amp;lt; &amp;#34;$0&amp;#34; | cut -c4- exit 0 } if [ &amp;#34;$1&amp;#34; = &amp;#34;--help&amp;#34; ] || [ &amp;#34;$1&amp;#34; = &amp;#34;-h&amp;#34; ]; then usage fi NAME=$1 COUNT=${2:-0} echo &amp;#34;$NAME&amp;#34; &amp;#34;$COUNT&amp;#34;</description></item><item><title>Postfix 覚書</title><link>https://d.oppara.tv/posts/2023/10/postfix-setting/</link><pubDate>Tue, 03 Oct 2023 22:11:39 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/10/postfix-setting/</guid><description>主要な項目の説明 myhostname：DNS で正引きできる（A レコードが存在する）ホスト名。 DNS 正引きの IP アドレスと、Postfix を設定する</description></item><item><title>www ありなしの RewiteRule</title><link>https://d.oppara.tv/posts/2023/09/rewrite-rule-www/</link><pubDate>Fri, 22 Sep 2023 00:02:37 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/09/rewrite-rule-www/</guid><description>www ありの https のURLに統一 RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L] RewriteCond %{HTTP_HOST} !^www\. [NC] RewriteRule ^(.*)$ http://www.%{HTTP_HOST}/$1 [R=301,L] www なしの https のURLに統一 RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L] RewriteCond %{HTTP_HOST} ^www\.(.*) [NC] RewriteRule ^ http://%1%{REQUEST_URI} [L,R=301]</description></item><item><title>WordPress の管理画面でプラグインの URL を取得する</title><link>https://d.oppara.tv/posts/2023/07/wp-admin-plugin-url/</link><pubDate>Tue, 18 Jul 2023 09:31:09 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/07/wp-admin-plugin-url/</guid><description>目的 WordPress の管理画面で独自プラグインの URL を取得したい。 対応方法 funtcion getPluginUrl() { return admin_url(&amp;#39;admin.php?page=&amp;#39; . プラグインのスラッグ); }</description></item><item><title>WordPress でスラッグにスラッシュを含ませたい</title><link>https://d.oppara.tv/posts/2023/05/wp-slug-with-slash/</link><pubDate>Sat, 20 May 2023 18:18:23 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/05/wp-slug-with-slash/</guid><description>問題 WordPress でスラッグにスラッシュを含ませられない。 スラッシュがハイフンに変換されてしまう。。。 対応方法 sanitize_title_with_dashes という関数でフィルタしてるので削除する。</description></item><item><title>WordPress で外観メニュー内に「メニュー」表示されない件</title><link>https://d.oppara.tv/posts/2023/05/wp-themes-menu/</link><pubDate>Fri, 19 May 2023 14:27:10 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/05/wp-themes-menu/</guid><description>問題 自分で作成したテーマを使用した場合、サイドメニュー -&amp;gt; 外観メニュー内に「メニュー」が表示されない。 対応方法 add_action(&amp;#39;after_setup_theme&amp;#39;, function(): void { register_nav_menu(&amp;#39;primary&amp;#39;, __(&amp;#39;Primary Menu&amp;#39;, &amp;#39;theme-slug&amp;#39;)); });</description></item><item><title>シェルスクリプトでディレクトリ名やファイル名を取得したい</title><link>https://d.oppara.tv/posts/2023/05/shellscript-dirname-filename/</link><pubDate>Tue, 02 May 2023 00:43:57 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/05/shellscript-dirname-filename/</guid><description>目的 よく忘れるので備忘録。 よく使うのは ##*/, %/* パターン パターン 説明 ${var#pattern} var の先頭から pattern の最短一致を削除する。 ${var##pattern} var の先頭から pattern の最長一致を削除する。 ${var%pattern}</description></item><item><title>Neovim のインストール</title><link>https://d.oppara.tv/posts/2023/04/neovim-install/</link><pubDate>Thu, 27 Apr 2023 08:29:24 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/04/neovim-install/</guid><description>目的 Neovim を使いたい。 対応方法 Homebrew でインストールする。 brew install neovim 開発バージョンをインストールする。 brew install --HEAD neovim 開発バージョンをアップデートする。 brew upgrade neovim --fetch-HEAD 参</description></item><item><title>XDG Base Directory のデフォルト値まとめ</title><link>https://d.oppara.tv/posts/2023/04/xdg-base-directory/</link><pubDate>Wed, 26 Apr 2023 23:49:07 +0900</pubDate><guid>https://d.oppara.tv/posts/2023/04/xdg-base-directory/</guid><description>はじめに XDG_ほにゃららの環境変数のデフォルト値を忘れてしまうのでまとめ。 まとめ XDG_CONFIG_HOME ユーザー個別の設定が書き込まれるディレクトリ。 echo &amp;#34;${XDG_CONFIG_HOME:-$HOME/.config}&amp;#34; XDG_DATA_HOME ユー</description></item><item><title>GitLab に登録している公開鍵を取得したい</title><link>https://d.oppara.tv/posts/2022/10/gitlab-pubkey/</link><pubDate>Fri, 07 Oct 2022 09:00:03 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/10/gitlab-pubkey/</guid><description>目的 GitLab に登録している公開鍵を手軽に取得したい。 対応方法 GitLab のユーザーページの URL の後ろに .keys をつける。 例 GitLab のホスト: gitlab.oppara.tv ユーザー名: oppara % curl https://gitlab.oppara.tv/oppara.keys 参考サイ</description></item><item><title>APG4b を Mac 上で確認したい</title><link>https://d.oppara.tv/posts/2022/09/apgb-mac/</link><pubDate>Sat, 24 Sep 2022 22:12:03 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/09/apgb-mac/</guid><description>目的 C++入門 AtCoder Programming Guide for beginners (APG4b) の解答を Mac 上で確認したい。 対応方法 以下のファイルを作成して ~/apg4b/include/bits/stdc++.h #include &amp;lt;iostream&amp;gt; // cout, endl, cin#include &amp;lt;string&amp;gt; // string, to_string, stoi#include &amp;lt;vector&amp;gt; // vector#include &amp;lt;algorithm&amp;gt; // min, max, swap, sort, reverse, lower_bound, upper_bound#include &amp;lt;utility&amp;gt; // pair, make_pair#include</description></item><item><title>VPN 接続しても IP アドレスが変わらない件</title><link>https://d.oppara.tv/posts/2022/09/mac-vpn/</link><pubDate>Sun, 04 Sep 2022 09:14:43 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/09/mac-vpn/</guid><description>問題 Mac で会社の VPN 設定をしても、IP アドレスが会社のものに切り替わらない。 対応方法 「システム環境設定」 -&amp;gt; 「ネットワーク」で設定した VPN 設定の [詳</description></item><item><title>Trivy で AWS のセキュリティスキャンを行う</title><link>https://d.oppara.tv/posts/2022/08/aws-trivy/</link><pubDate>Sun, 21 Aug 2022 07:45:32 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/08/aws-trivy/</guid><description>やり方 aws-vault を利用し、EC2 のセキュリティスキャンを行う場合。 % aws-vault exec opp-dev -- trivy aws --service ec2 ヘルプ % trivy aws --help 参考サイト TrivyでAWSアカウントのセキュリテ</description></item><item><title>DynamoDB をローカル環境で使いたい</title><link>https://d.oppara.tv/posts/2022/06/aws-dynamodb-local/</link><pubDate>Tue, 28 Jun 2022 07:26:34 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/06/aws-dynamodb-local/</guid><description>目的 DynamoDB をローカル環境で使いたい。 対応方法 DynamoDB ローカルを Docker で動かす version: &amp;#39;3.8&amp;#39; services: dynamodb-local: command: &amp;#34;-jar DynamoDBLocal.jar -sharedDb -dbPath ./data&amp;#34; image: &amp;#34;amazon/dynamodb-local:latest&amp;#34; container_name: dynamodb-local ports: - &amp;#34;8888:8000&amp;#34; volumes: - &amp;#34;./docker/dynamodb:/home/dynamodblocal/data&amp;#34; working_dir: /home/dynamodblocal 起動 % docker-compose up -d テーブルを作成してみる</description></item><item><title>Wrangler で Cloudflare Workers</title><link>https://d.oppara.tv/posts/2022/05/wrangler-cloudflare-workers/</link><pubDate>Tue, 17 May 2022 22:08:35 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/05/wrangler-cloudflare-workers/</guid><description>はじめに Wrangler（Workers CLI）を使って Cloudflare Workers を試してみる。 Wrangler のインストール % npm install -g wrangler Cloudflare の認証 2 段階認証にもたもたしてたらタイ</description></item><item><title>npx 実行時に Ok to proceed? (y) と表示させない</title><link>https://d.oppara.tv/posts/2022/05/npx-not-show-ok-to-proceed/</link><pubDate>Tue, 10 May 2022 21:28:23 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/05/npx-not-show-ok-to-proceed/</guid><description>問題 npx 実行時にyとたたくのが面倒、もしくはたたくこと自体を忘れてしまう。 % npx cowsay foo Need to install the following packages: cowsay Ok to proceed? (y) 対応方法 --yesをつける。(キャッシ</description></item><item><title>Brewfile を上書きしたい</title><link>https://d.oppara.tv/posts/2022/04/brew-bundle-dump/</link><pubDate>Wed, 27 Apr 2022 22:58:54 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/04/brew-bundle-dump/</guid><description>目的 Brewfile コメント付きで上書きしたい。 やり方 % brew bundle dump --force --describe ヘルプ表示 % brew bundle --help 環境 % brew --version Homebrew 3.4.8-11-g96e8796 Homebrew/homebrew-core (git revision 44fc63c8cca; last commit 2022-04-25) Homebrew/homebrew-cask (git revision 659584ba8c; last commit 2022-04-26) % sw_vers ProductName: macOS ProductVersion: 12.3.1 BuildVersion: 21E258</description></item><item><title>AWS CLI で証明書の再インポート</title><link>https://d.oppara.tv/posts/2022/04/aws-acm-import-certificate/</link><pubDate>Tue, 26 Apr 2022 09:22:58 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/04/aws-acm-import-certificate/</guid><description>はじめに マネコンからの再インポートが面倒くさかったので備忘録。 対応方法 シェルスクリプトから実行する。 #!/bin/bash set -eu # インポートする証明書の ARN ARN=&amp;#34;arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-12345678901 &amp;#34; # 証</description></item><item><title>WP-CLI でテーブル内の文字列を置換する</title><link>https://d.oppara.tv/posts/2022/04/wp-search-replace/</link><pubDate>Mon, 11 Apr 2022 21:52:05 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/04/wp-search-replace/</guid><description>はじめに WP-CLI でテーブル内の文字列を置換する。 やり方 プレフィックスがwp_のテーブル内のsearchをreplaceに置換してoutに書き出す。</description></item><item><title>メール送信ワンライナー</title><link>https://d.oppara.tv/posts/2022/04/mail-one-liner/</link><pubDate>Fri, 08 Apr 2022 13:04:15 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/04/mail-one-liner/</guid><description>目的 mail コマンドで対話的にメールを送るのが面倒だったので備忘録。 対応方法 % echo &amp;#34;本文&amp;#34; | mail -s &amp;#34;件名&amp;#34; -r no-replay@example.com foo@oppara.tv bar@oppara.tv 環境</description></item><item><title>GitHub Actions 時でなくてもブランチ名を利用したい</title><link>https://d.oppara.tv/posts/2022/04/github-actions-git-branch/</link><pubDate>Sun, 03 Apr 2022 00:04:44 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/04/github-actions-git-branch/</guid><description>目的 Actions 時に呼び出すシェルスクリプト内で、Actions 時でなくてもブランチ名を利用したい。 対応方法 #!/bin/bash set -Ceu if [ &amp;#34;${GITHUB_REF_NAME:-UNDEF}&amp;#34; = &amp;#34;UNDEF&amp;#34; ]; then GITHUB_REF_NAME=$(git rev-parse --abbrev-ref HEAD) fi 参考サイト 環</description></item><item><title>GitLab CI 時でなくてもブランチ名を利用したい</title><link>https://d.oppara.tv/posts/2022/04/gitlab-ci-git-branch/</link><pubDate>Sat, 02 Apr 2022 22:50:07 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/04/gitlab-ci-git-branch/</guid><description>目的 CI 時に呼び出すシェルスクリプト内で、CI 時でなくてもブランチ名を利用したい。 対応方法 #!/bin/bash set -Ceu if [ &amp;#34;${CI_COMMIT_REF_NAME:-UNDEF}&amp;#34; = &amp;#34;UNDEF&amp;#34; ]; then CI_COMMIT_REF_NAME=$(git rev-parse --abbrev-ref HEAD) fi ## 以下の書き方は GitLab 16.0 以</description></item><item><title>Windows で rsync を使いたい</title><link>https://d.oppara.tv/posts/2022/03/windows-rsync/</link><pubDate>Mon, 28 Mar 2022 23:48:44 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/windows-rsync/</guid><description>問題 Windows で rsync を使いたい。 でも WSL を使うほどでもない。 対応方法 Git for Windows に rsync をインストールする。 スタートメニューの「Git Bash」を右クリックして、</description></item><item><title>Chrome を使っているとファンがうるさい</title><link>https://d.oppara.tv/posts/2022/03/chrome-fan-solution/</link><pubDate>Sun, 27 Mar 2022 10:01:24 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/chrome-fan-solution/</guid><description>問題 Chrome を使うとファンがうなりを上げる。 対応方法 chrome://flags/#enhanced-bookmarks-experimentを開</description></item><item><title>Bash 変数文字列置換</title><link>https://d.oppara.tv/posts/2022/03/bash-string-replacement/</link><pubDate>Thu, 24 Mar 2022 22:45:36 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/bash-string-replacement/</guid><description>はじめに よく使う変数内文字列置換を忘れるのでのメモ。 例 ~/tmp/hoge.sh #!/bin/bash echo &amp;#34;$0&amp;#34; # basename echo &amp;#34;${0##*/}&amp;#34; # 拡張子取得 echo &amp;#34;${0##*\.}&amp;#34; # dirname echo &amp;#34;${0%/*}&amp;#34; # 拡張子以外 echo &amp;#34;${0%.*}&amp;#34; output /Users/oppara/tmp/hoge.sh hoge.sh sh /Users/oppara/tmp /Users/oppara/tmp/hoge 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion:</description></item><item><title>Pandoc マークダウンを PDF に変換しようとしてエラー</title><link>https://d.oppara.tv/posts/2022/03/pandoc-markdown-pdf-error/</link><pubDate>Tue, 22 Mar 2022 12:46:21 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/pandoc-markdown-pdf-error/</guid><description>問題 マークダウンを PDF に変換しようとすると以下のエラー。 % pandoc hoge.md -o hoge.pdf pandoc: pdflatex: createProcess: posix_spawnp: illegal operation (Inappropriate ioctl for device) 対応方法 wkhtmltopdf を使ってみる。 wkhtmltopdf のインストール。 % brew install --cask wkhtmltopdf マー</description></item><item><title>AWS CLI で AWS Backup を利用した EC2 のバックアップ設定をする</title><link>https://d.oppara.tv/posts/2022/03/aws-backup-ec2-cli/</link><pubDate>Mon, 21 Mar 2022 18:13:28 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/aws-backup-ec2-cli/</guid><description>はじめに AWS CLI で AWS Backup を利用した EC2 のバックアップ設定の備忘録。 デフォルトのロールの作成 1 つもバックアッププランがない状態で、cli 経由でバックリ</description></item><item><title>EC2インスタンスのタグとプライベートIPアドレスを表示する</title><link>https://d.oppara.tv/posts/2022/03/aws-ec2-describe-ipaddress/</link><pubDate>Sat, 19 Mar 2022 22:59:39 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/aws-ec2-describe-ipaddress/</guid><description>#!/usr/bin/env bash set -e desc() { while read -r line do set ${line} name=${1} ip=${2} echo &amp;#34;${name}: ${ip}&amp;#34; done } aws ec2 describe-instances --filter &amp;#34;Name=instance-state-name,Values=running&amp;#34; \ | jq -r &amp;#39;.Reservations[].Instances[] | [(.Tags[] | select(.Key==&amp;#34;Name&amp;#34;).Value), .PrivateIpAddress] | @tsv&amp;#39; \ | desc ec2:DescribeInstancesポリシーが必要。 環</description></item><item><title>Bash 変数のデフォルト値を設定する</title><link>https://d.oppara.tv/posts/2022/03/bash-default-value/</link><pubDate>Fri, 18 Mar 2022 08:37:01 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/bash-default-value/</guid><description>はじめに 変数のデフォルト値の設定をを忘れるのでのメモ。 例 #!/bin/bash # var には代入されない echo &amp;#34;hello ${var:-world}&amp;#34; echo &amp;#34;$var&amp;#34; # デフォルト値を変数化するときは再代入した方が楽 var=${var:-foo} echo</description></item><item><title>AWS Vault を使って MFA と AssumeRole（スイッチロール）</title><link>https://d.oppara.tv/posts/2022/03/aws-vault-assumerole-mfa/</link><pubDate>Thu, 17 Mar 2022 23:01:07 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/aws-vault-assumerole-mfa/</guid><description>はじめに AWS Vault を使って MFA 経由で AssumeRole する備忘録。 99designs/aws-vault 前提 以下のアカウントを作成済みでスイッチロールの設定済み。 oppara (default): スイッチ元 (MFA 認証) oppara-dev: スイッチ先 対応</description></item><item><title>Session Manager で Amazon Linux にログイン後ユーザーを切り替える</title><link>https://d.oppara.tv/posts/2022/03/aws-ssm-switch-user/</link><pubDate>Wed, 16 Mar 2022 22:31:09 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/aws-ssm-switch-user/</guid><description>はじめに Session Manager で EC2 上の Amazon Linux にログイン後、他のユーザーになるための備忘録。 ログイン時はssm-user sh-4.2$ whoami ssm-user 対応方法 ec2-user になる sh-4.2$ sudo su --login ec2-user root になる sh-4.2$</description></item><item><title>git log のエイリアス</title><link>https://d.oppara.tv/posts/2022/03/git-log-alias/</link><pubDate>Tue, 15 Mar 2022 21:59:21 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/git-log-alias/</guid><description>問題 git logの表示が寂しい。 対応 好みのログを表示するエイリアスを設定する。 Git のエイリアス ; ~/.gitconfig [alias] ll = log --graph --color \ --pretty=format:&amp;#39;%C(red)%x09%h %C(yellow)%cn %C(green)%ci %C(reset)%s%C(blue)%d%C(reset)&amp;#39; format 解説 %C(red)%x09%h 9 文字空けて省略さ</description></item><item><title>Speedtest の CLI クライアントを試してみる</title><link>https://d.oppara.tv/posts/2022/03/cli-speedtest/</link><pubDate>Mon, 14 Mar 2022 21:16:06 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/cli-speedtest/</guid><description>はじめに speedtest.net の CLI クライアント があったので試してみる。 インストール % brew install teamookla/speedtest/speedtest 初回実行 初回実行時は、ライセンスの確認がある。 % speedtest ==================================================================== You may only use this Speedtest software and information</description></item><item><title>yaml, toml, json, hclの変換ツール yj</title><link>https://d.oppara.tv/posts/2022/03/cli-yaml-toml-json-hcl-converter/</link><pubDate>Sun, 13 Mar 2022 21:46:57 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/cli-yaml-toml-json-hcl-converter/</guid><description>はじめに yaml から toml への変換ツールを探していて良さげなものを発見したので使ってみる。 sclevine/yj: CLI - Convert between YAML, TOML, JSON, and HCL インストール % brew install yj 使い方 標準入力から読</description></item><item><title>Hugo で作成した記事を GitHub Pages で公開する</title><link>https://d.oppara.tv/posts/2022/03/hugo-github-pages/</link><pubDate>Sat, 12 Mar 2022 16:08:15 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/hugo-github-pages/</guid><description>DNS の設定 d.oppara.tvの CNAME をoppara.github.ioに設定する。 % dig d.oppara.tv @8.8.8.8 ... ;; ANSWER SECTION: d.oppara.tv. 3600 IN CNAME oppara.github.io. oppara.github.io. 3600 IN A 185.199.108.153 oppara.github.io. 3600 IN A 185.199.111.153 oppara.github.io. 3600 IN A 185.199.109.153 oppara.github.io. 3600</description></item><item><title>スムーズに Hugo でブログを書くツール</title><link>https://d.oppara.tv/posts/2022/03/hugo-blog-tool/</link><pubDate>Fri, 11 Mar 2022 14:35:32 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/hugo-blog-tool/</guid><description>はじめに hugo vim editorで検索していたら以下の b4b4r07 さんの良さげなブログを発見。 スムーズに Hugo でブログを書くツール | tellme.tokyo 上記ブログで使用されている b4b4r07/blog</description></item><item><title>--editor オプション付きで hugo new するとエラーになる</title><link>https://d.oppara.tv/posts/2022/03/hugo-with-editor/</link><pubDate>Thu, 10 Mar 2022 12:57:57 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/hugo-with-editor/</guid><description>問題 --editor オプション付きで hugo new すると以下のエラーになってしまう。 % hugo new posts/2022/03/hoge/index.md --editor vim Content &amp;#34;/path/to/hugo/content/posts/2022/03/hoge/index.md&amp;#34; created Editing &amp;#34;/path/to/hugo/content/posts/2022/03/hoge/index.md&amp;#34; with &amp;#34;vim&amp;#34; ... Error: access denied: &amp;#34;vim&amp;#34; is not whitelisted in policy &amp;#34;security.exec.allow&amp;#34;; the current security configuration is: [security] enableInlineShortcodes = false [security.exec] allow = [&amp;#39;^dart-sass-embedded$&amp;#39;, &amp;#39;^go$&amp;#39;, &amp;#39;^npx$&amp;#39;, &amp;#39;^postcss$&amp;#39;]</description></item><item><title>Hugo の設定</title><link>https://d.oppara.tv/posts/2022/03/hugo-config/</link><pubDate>Wed, 09 Mar 2022 11:14:47 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/hugo-config/</guid><description>Configure Hugo | Hugo 日本語周り # デフォルトの言語設定 defaultContentLanguage = &amp;#34;ja&amp;#34; # &amp;lt;language&amp;gt; エレメント用の値 languageCode = &amp;#34;ja&amp;#34; # 日本語の文字数を正しく数えて、短いサマリーを表示できるようにする hasCJKLanguage</description></item><item><title>Hugo 事始め</title><link>https://d.oppara.tv/posts/2022/03/hugo-quick-start/</link><pubDate>Tue, 08 Mar 2022 00:39:07 +0900</pubDate><guid>https://d.oppara.tv/posts/2022/03/hugo-quick-start/</guid><description>はじめに Quick Start | Hugo とりあえずテーマをインストールしてコンテンツを表示するところまで。 Hugo のインストール % brew install hugo サイトの作成 % hugo new site d.oppara.tv テーマの追加</description></item></channel></rss>