[{"content":"はじめに Fluentd で設定ファイルを確認する方法についての備呆録。\nCLI % fluentd --dry-run -c /etc/fluentd/fluent.conf Docker プラグイン使っている場合は、あらかじめインストールしておく必要がある。\n% docker run \\ -ti --rm \\ --platform linux/x86_64 \\ -v ./:/fluentd/etc -v ./:/var/log \\ fluent/fluentd:v1.8-debian-1 --dry-run -c /fluentd/etc/hoge.conf fluentd --dry-run -c /fluentd/etc/hoge.conf 2025-01-12 09:07:29 +0000 [info]: parsing config file is succeeded path=\u0026#34;/fluentd/etc/hoge.conf\u0026#34; 2025-01-12 09:07:29 +0000 [info]: gem \u0026#39;fluentd\u0026#39; version \u0026#39;1.8.1\u0026#39; 2025-01-12 09:07:29 +0000 [info]: starting fluentd-1.8.1 as dry run mode ruby=\u0026#34;2.6.5\u0026#34; 2025-01-12 09:07:29 +0000 [info]: using configuration file: \u0026lt;ROOT\u0026gt;  \u0026lt;source\u0026gt;  @type tail  path \u0026#34;/var/log/httpd-access.log\u0026#34;  pos_file \u0026#34;/var/log/td-agent/httpd-access.log.pos\u0026#34;  tag \u0026#34;s3.apache.access\u0026#34;  \u0026lt;parse\u0026gt;  @type \u0026#34;apache2\u0026#34;  \u0026lt;/parse\u0026gt;  \u0026lt;/source\u0026gt;  \u0026lt;match log.**\u0026gt;  @type file  path \u0026#34;/var/log/fluent/myapp\u0026#34;  compress gzip  \u0026lt;buffer\u0026gt;  timekey 1d  timekey_use_utc true  timekey_wait 10m  path \u0026#34;/var/log/fluent/myapp\u0026#34;  \u0026lt;/buffer\u0026gt;  \u0026lt;/match\u0026gt; \u0026lt;/ROOT\u0026gt; 2025-01-12 09:07:29 +0000 [info]: finsihed dry run mode 環境 % sw_vers ProductName: macOS ProductVersion: 15.2 BuildVersion: 24C101 % docker --version Docker version 27.4.0, build bde2b89 ","permalink":"https://d.oppara.tv/posts/2025/01/fluentd-dry-run/","summary":"はじめに Fluentd で設定ファイルを確認する方法についての備呆録。 CLI % fluentd --dry-run -c /etc/fluentd/fluent.conf Docker プラグイン使っている場合は、あらかじめインストールしておく必要がある。","title":"Fluentd で dry-run"},{"content":"はじめに MySQL でデータベース内のすべてのテーブルを削除する方法の備忘録。\n手順 DROP 文を作成して実行する。\n$ echo \u0026#34;SET FOREIGN_KEY_CHECKS = 0;\u0026#34; \u0026gt; /patht/to/tmp.sql $ mysqldump -h $DB_HOST --single-transaction --add-drop-table --no-data -u $DB_USER -p $DB_NAME | grep \u0026#39;DROP TABLE\u0026#39; \u0026gt;\u0026gt; /path/to/tmp.sql $ echo \u0026#34;SET FOREIGN_KEY_CHECKS = 1;\u0026#34; \u0026gt;\u0026gt; /path/to/tmp.sql $ mysql -h $DB_HOST -u $DB_USER -p $DB_NAME \u0026lt; /path/to/tmp.sql ","permalink":"https://d.oppara.tv/posts/2024/10/mysql-drop-all-table/","summary":"はじめに MySQL でデータベース内のすべてのテーブルを削除する方法の備忘録。 手順 DROP 文を作成して実行する。 $ echo \u0026#34;SET FOREIGN_KEY_CHECKS = 0;\u0026#34; \u0026gt; /patht/to/tmp.sql $ mysqldump -h $DB_HOST --single-transaction --add-drop-table --no-data -u $DB_USER -p $DB_NAME | grep \u0026#39;DROP","title":"MySQL ですべてのテーブルを削除する"},{"content":"TARGET_TAG=\u0026#34;hoge\u0026#34; aws ec2 describe-instances \\  --filter \u0026#34;Name=instance-state-name,Values=running\u0026#34; \u0026#34;Name=tag:Name,Values=${TARGET_TAG}\u0026#34; \\  | jq -r \u0026#39;.Reservations[].Instances[] | .PrivateIpAddress \u0026#39; ec2:DescribeInstancesポリシーが必要。\n環境 $ aws --version aws-cli/2.17.41 Python/3.11.9 Linux/6.1.102-111.182.amzn2023.x86_64 exec-env/CloudShell exe/x86_64.amzn.2023 ","permalink":"https://d.oppara.tv/posts/2024/09/aws-ec2-describe-private-ip/","summary":"TARGET_TAG=\u0026#34;hoge\u0026#34; aws ec2 describe-instances \\ --filter \u0026#34;Name=instance-state-name,Values=running\u0026#34; \u0026#34;Name=tag:Name,Values=${TARGET_TAG}\u0026#34; \\ | jq -r \u0026#39;.Reservations[].Instances[] | .PrivateIpAddress \u0026#39; ec2:DescribeInstancesポリシーが必要。 環境 $ aws --version aws-cli/2.17.41 Python/3.11.9 Linux/6.1.102-111.182.amzn2023.x86_64 exec-env/CloudShell exe/x86_64.amzn.2023","title":"運用中で指定した名前の EC2 のプライベートアドレスを取得する"},{"content":"使いどころ 例えば、サーバのアップグレード時に、実際に通信が途切れてないか 1 秒に 1 回サーバにアクセスして接続を確認したい時とか。\n手順 url=https://oppara.tv/ while true; do TZ=JST-9 date; curl -I \u0026#34;$url\u0026#34;; sleep 1s; done Mac の場合\nurl=https://oppara.tv/ while true; do TZ=JST-9 date; curl -I $url; sleep 1; done 環境 % sw_vers ProductName: macOS ProductVersion: 14.4.1 BuildVersion: 23E224 ","permalink":"https://d.oppara.tv/posts/2024/06/curl-per-second/","summary":"使いどころ 例えば、サーバのアップグレード時に、実際に通信が途切れてないか 1 秒に 1 回サーバにアクセスして接続を確認したい時とか。 手順 url=https://oppara.tv/ while true; do TZ=JST-9","title":"1 秒に 1 回サーバにアクセスするコマンド"},{"content":"問題 WordPress の管理画面でカテゴリーをチェックすると、そのカテゴリーが上に表示されるのを止めたい。\n対応方法 add_filter(\u0026#39;wp_terms_checklist_args\u0026#39;, function($args) {  $args[\u0026#39;checked_ontop\u0026#39;] = false;  return $args; }); 参考サイト  WordPressの設置の際に気を配りたい。カテゴリーの階層構造について | 株式会社LIG(リグ)｜DX支援・システム開発・Web制作  環境 % wp core version 6.5.3 ","permalink":"https://d.oppara.tv/posts/2024/05/wp-terms-checked-ontop/","summary":"問題 WordPress の管理画面でカテゴリーをチェックすると、そのカテゴリーが上に表示されるのを止めたい。 対応方法 add_filter(\u0026#39;wp_terms_checklist_args\u0026#39;, function($args) { $args[\u0026#39;checked_ontop\u0026#39;] = false; return $args; }); 参考サイト WordPre","title":"WordPress の管理画面でチェックされたカテゴリーが上に表示されるのを抑止する"},{"content":"はじめに Zabbix のトリガー /: Disk space is low の条件の備呆録\n/: Disk space is low トリガーの条件 last(/oppara.tv/vfs.fs.size[/,pused])\u0026gt;{$VFS.FS.PUSED.MAX.WARN:\u0026#34;/\u0026#34;} and ((last(/oppara.tv/vfs.fs.size[/,total])-last(/oppara.tv/vfs.fs.size[/,used]))\u0026lt;{$VFS.FS.FREE.MIN.WARN:\u0026#34;/\u0026#34;} or timeleft(/oppara.tv/vfs.fs.size[/,pused],1h,100)\u0026lt;1d) 見やすく整形してみる。\nlast(/oppara.tv/vfs.fs.size[/, pused]) \u0026gt; {$VFS.FS.PUSED.MAX.WARN:\u0026#34;/\u0026#34;} and ( (last(/oppara.tv/vfs.fs.size[/, total]) - last(/oppara.tv/vfs.fs.size[/, used])) \u0026lt; {$VFS.FS.FREE.MIN.WARN:\u0026#34;/\u0026#34;} or timeleft(/oppara.tv/vfs.fs.size[/, pused], 1h, 100) \u0026lt; 1d ) 日本語にしてみる。\nディスク使用率が $VFS.FS.PUSED.MAX.WARN より大きい かつ ( ディスク残量が $VFS.FS.FREE.MIN.WARN より小さい もしくは 1日以内にディスク使用率が100%となる ) 環境 $ zabbix_server --version zabbix_server (Zabbix) 6.0.23 ","permalink":"https://d.oppara.tv/posts/2024/05/zabbix-disk-space-is-low/","summary":"はじめに Zabbix のトリガー /: Disk space is low の条件の備呆録 /: Disk space is low トリガーの条件 last(/oppara.tv/vfs.fs.size[/,pused])\u0026gt;{$VFS.FS.PUSED.MAX.WARN:\u0026#34;/\u0026#34;} and ((last(/oppara.tv/vfs.fs.size[/,total])-last(/oppara.tv/vfs.fs.size[/,used]))\u0026lt;{$VFS.FS.FREE.MIN.WARN:\u0026#34;/\u0026#34;} or timeleft(/oppara.tv/vfs.fs.size[/,pused],1h,100)\u0026lt;1d) 見やすく整形してみる。 last(/oppara.tv/vfs.fs.size[/, pused]) \u0026gt; {$VFS.FS.PUSED.MAX.WARN:\u0026#34;/\u0026#34;} and ( (last(/oppara.tv/vfs.fs.size[/, total]) - last(/oppara.tv/vfs.fs.size[/, used])) \u0026lt; {$VFS.FS.FREE.MIN.WARN:\u0026#34;/\u0026#34;} or timeleft(/oppara.tv/vfs.fs.size[/, pused], 1h, 100) \u0026lt; 1d","title":"Zabbix `Disk space is low` トリガーの条件"},{"content":"はじめに openssl を使って証明書の諸々を確認する方法の備忘録。\n証明書のコモンネームと有効開始日・有効期限日を確認する % openssl x509 -noout -subject -dates -in oppara.tv.crt subject=CN=oppara.tv notBefore=Jan 31 19:06:53 2024 GMT notAfter=Apr 30 19:06:52 2024 GMT 証明書と秘密鍵の「整合性」を確認する ハッシュが同じであれば整合性が取れている。\n% openssl x509 -noout -modulus -in oppara.tv.cert | md5sum 48f8be8df2822b4f302fc16276566f9e - % openssl rsa -noout -modulus -in oppara.tv.key | md5sum 48f8be8df2822b4f302fc16276566f9e - 証明書と中間証明書の「整合性」を確認する ハッシュが同じであれば整合性が取れている。\n% openssl x509 -issuer_hash -noout -in oppara.tv.cert 8d33f237 % openssl x509 -subject_hash -noout -in chain.cert 8d33f237 リモートの証明書のコモンネームと有効開始日・有効期限日を確認する % echo | openssl s_client -connect oppara.tv:443 2\u0026gt; /dev/null | openssl x509 -noout -subject -dates 2\u0026gt; /dev/null subject=CN=oppara.tv notBefore=Jan 14 00:17:24 2024 GMT notAfter=Apr 13 00:17:23 2024 GMT 環境 % sw_vers ProductName: macOS ProductVersion: 14.2.1 BuildVersion: 23C71 % openssl -version OpenSSL 3.2.1 30 Jan 2024 (Library: OpenSSL 3.2.1 30 Jan 2024) ","permalink":"https://d.oppara.tv/posts/2024/02/check-certificate-using-openssl/","summary":"はじめに openssl を使って証明書の諸々を確認する方法の備忘録。 証明書のコモンネームと有効開始日・有効期限日を確認する % openssl x509 -noout -subject -dates -in oppara.tv.crt subject=CN=oppara.tv notBefore=Jan 31 19:06:53 2024 GMT notAfter=Apr 30","title":"openssl を使って証明書を確認"},{"content":"はじめに 中括弧（{}）が特徴的な、Intel One Mono を使ってみる。\n    インストール % install homebrew/cask-fonts/font-intel-one-mono 環境 % sw_vers ProductName: macOS ProductVersion: 14.2.1 BuildVersion: 23C71 % brew --version Homebrew 4.2.5 ","permalink":"https://d.oppara.tv/posts/2024/01/font-intel-one-mono/","summary":"はじめに 中括弧（{}）が特徴的な、Intel One Mono を使ってみる。 インストール % install homebrew/cask-fonts/font-intel-one-mono 環境 % sw_vers ProductName: macOS ProductVersion: 14.2.1 BuildVersion: 23C71 % brew --version Homebrew 4.2.5","title":"Intel One Mono を使う"},{"content":"はじめに AWS CLIからテストメールを送信する方法を備忘録。\n手順 $ to=\u0026#34;test@example.com\u0026#34; $ aws ses send-email \\  --from info@oppara.tv \\  --to \u0026#34;${to}\u0026#34; \\  --subject \u0026#34;件名\u0026#34; \\  --text \u0026#34;本文\u0026#34; 環境 $ aws --version aws-cli/2.15.13 Python/3.11.6 Linux/6.1.66-91.160.amzn2023.x86_64 exec-env/CloudShell exe/x86_64.amzn.2023 prompt/off ","permalink":"https://d.oppara.tv/posts/2024/01/aws-ses-cli-send-email/","summary":"はじめに AWS CLIからテストメールを送信する方法を備忘録。 手順 $ to=\u0026#34;test@example.com\u0026#34; $ aws ses send-email \\ --from info@oppara.tv \\ --to \u0026#34;${to}\u0026#34; \\ --subject \u0026#34;件名\u0026#34; \\ --text \u0026#34;本文\u0026#34;","title":"AWS CLIからテストメールを送信"},{"content":"Node.js npx serve port 指定する場合。\nnpx serve -p 1192 serve - npm\nPython python -m http.server 1192 http.server \u0026mdash; HTTP サーバ — Python 3.10.13 ドキュメント\nPHP php -S localhost:1192 PHP: ビルトインウェブサーバー - Manual\nまとめ 静的コンテンツは node で。PHP が絡む場合は php で。\n環境 % node -v v21.5.0 % npx -v 10.2.4 % python --version Python 3.10.6 % php -v PHP 8.3.1 (cli) (built: Dec 20 2023 12:44:38) (NTS) Copyright (c) The PHP Group Zend Engine v4.3.1, Copyright (c) Zend Technologies  with Zend OPcache v8.3.1, Copyright (c), by Zend Technologies % sw_vers ProductName: macOS ProductVersion: 14.2.1 BuildVersion: 23C71 ","permalink":"https://d.oppara.tv/posts/2024/01/localserver/","summary":"Node.js npx serve port 指定する場合。 npx serve -p 1192 serve - npm Python python -m http.server 1192 http.server \u0026mdash; HTTP サーバ — Python 3.10.13 ドキュメント PHP php -S localhost:1192 PHP: ビルトインウェブサーバー - Manual まとめ 静的コンテンツは node で","title":"ローカルで Web サーバーを立てる"},{"content":"はじめに マネジメントコンソールで Aurora Serverless V1 を作成できないので、AWS CLI の覚書。\n手順 DATABASE_NAME=\u0026#34;try_db\u0026#34; DB_CLUSTER_IDENTIFIER=\u0026#34;try-cluster\u0026#34; VPC_SECURITY_GROUP_IDS=\u0026#34;sg-016afba3d02181db5\u0026#34; MASTER_USERNAME=\u0026#34;admin\u0026#34; MASTER_USER_PASSWORD=\u0026#34;p4ssw0rd\u0026#34; DB_SUBNET_GROUP_NAME=\u0026#34;try-db-subnet-group\u0026#34;  aws rds create-db-cluster \\  --database-name \u0026#34;${DATABASE_NAME}\u0026#34; \\  --db-cluster-identifier \u0026#34;${DB_CLUSTER_IDENTIFIER}\u0026#34; \\  --vpc-security-group-ids \u0026#34;${VPC_SECURITY_GROUP_IDS}\u0026#34; \\  --master-username \u0026#34;${MASTER_USERNAME}\u0026#34; \\  --master-user-password \u0026#34;${MASTER_USER_PASSWORD}\u0026#34; \\  --db-subnet-group-name \u0026#34;${DB_SUBNET_GROUP_NAME}\u0026#34; \\  --availability-zones ap-northeast-1a ap-northeast-1c ap-northeast-1d \\  --engine aurora-mysql \\  --engine-version 5.7.mysql_aurora.2.08.3 \\  --engine-mode serverless \\  --scaling-configuration \u0026#39;{\u0026#34;MinCapacity\u0026#34;:1,\u0026#34;MaxCapacity\u0026#34;:2,\u0026#34;AutoPause\u0026#34;:true,\u0026#34;SecondsUntilAutoPause\u0026#34;:300,\u0026#34;TimeoutAction\u0026#34;:\u0026#34;ForceApplyCapacityChange\u0026#34;,\u0026#34;SecondsBeforeTimeout\u0026#34;:60}\u0026#39; 参考  Aurora Serverless v1 DB クラスターの作成 - Amazon Aurora create-db-cluster — AWS CLI 2.13.38 Command Reference  環境 $ aws --version aws-cli/2.13.35 Python/3.11.6 Linux/6.1.59-84.139.amzn2023.x86_64 exec-env/CloudShell exe/x86_64.amzn.2 prompt/off ","permalink":"https://d.oppara.tv/posts/2023/11/aws-aurora-serverless-v1/","summary":"はじめに マネジメントコンソールで Aurora Serverless V1 を作成できないので、AWS CLI の覚書。 手順 DATABASE_NAME=\u0026#34;try_db\u0026#34; DB_CLUSTER_IDENTIFIER=\u0026#34;try-cluster\u0026#34; VPC_SECURITY_GROUP_IDS=\u0026#34;sg-016afba3d02181db5\u0026#34; MASTER_USERNAME=\u0026#34;admin\u0026#34; MASTER_USER_PASSWORD=\u0026#34;p4ssw0rd\u0026#34; DB_SUBNET_GROUP_NAME=\u0026#34;try-db-subnet-group\u0026#34; aws rds create-db-cluster \\ --database-name \u0026#34;${DATABASE_NAME}\u0026#34; \\ --db-cluster-identifier \u0026#34;${DB_CLUSTER_IDENTIFIER}\u0026#34; \\ --vpc-security-group-ids \u0026#34;${VPC_SECURITY_GROUP_IDS}\u0026#34; \\ --master-username \u0026#34;${MASTER_USERNAME}\u0026#34; \\ --master-user-password \u0026#34;${MASTER_USER_PASSWORD}\u0026#34; \\ --db-subnet-group-name \u0026#34;${DB_SUBNET_GROUP_NAME}\u0026#34; \\ --availability-zones ap-northeast-1a ap-northeast-1c","title":"CLI で Aurora Serverless V1 を作成する"},{"content":"対応方法 middleware を使用する。\n// middleware.ts  import { NextResponse, NextRequest } from \u0026#39;next/server\u0026#39;;  export const config = {  // /hoge/ 以下のパスに対して Basic 認証をかける  matcher: [\u0026#39;/hoge/:path*\u0026#39;], }  export function middleware(req: NextRequest) {   const basicAuth = req.headers.get(\u0026#39;authorization\u0026#39;);  if (basicAuth) {  const authValue = basicAuth.split(\u0026#39; \u0026#39;)[1];  const [user, password] = atob(authValue).split(\u0026#39;:\u0026#39;);  if (user === process.env.BASIC_AUTH_USER  \u0026amp;\u0026amp; password === process.env.BASIC_AUTH_PASSWORD) {  return NextResponse.next();  }  }   return new NextResponse(\u0026#39;Unauthorized\u0026#39;, {  status: 401,  headers: {  \u0026#39;WWW-Authenticate\u0026#39;: \u0026#39;Basic realm=\u0026#34;Secure Area\u0026#34;\u0026#39;,  },  }); }; # .env.local  BASIC_AUTH_USER=foo BASIC_AUTH_PASSWORD=bar 環境 % npx next -v Next.js v14.0.3 ","permalink":"https://d.oppara.tv/posts/2023/11/nextjs-basic-auth/","summary":"対応方法 middleware を使用する。 // middleware.ts import { NextResponse, NextRequest } from \u0026#39;next/server\u0026#39;; export const config = { // /hoge/ 以下のパスに対して Basic 認証をかける matcher: [\u0026#39;/hoge/:path*\u0026#39;], } export function middleware(req: NextRequest) { const basicAuth = req.headers.get(\u0026#39;authorization\u0026#39;); if (basicAuth) { const authValue = basicAuth.split(\u0026#39; \u0026#39;)[1]; const [user, password] = atob(authValue).split(\u0026#39;:\u0026#39;); if (user","title":"Next.js で Basic 認証をかける"},{"content":"対応方法 middleware を使用する。\n// middleware.ts  import { NextResponse, NextRequest } from \u0026#39;next/server\u0026#39;;  const validAddresses = new Set(); if (process.env.VALID_IP_ADDRESSES) {  process.env.VALID_IP_ADDRESSES!.split(\u0026#39;,\u0026#39;).forEach((address) =\u0026gt; {  validAddresses.add(address.trim());  }) }  export function middleware(req: NextRequest) {  let ip: string = req.ip ?? req.headers.get(\u0026#39;x-real-ip\u0026#39;) ?? \u0026#39;\u0026#39;;  // with CDN or LB or next dev  if (!ip \u0026amp;\u0026amp; req.headers.get(\u0026#39;x-forwarded-for\u0026#39;)) {  ip = req.headers.get(\u0026#39;x-forwarded-for\u0026#39;)?.split(\u0026#39;,\u0026#39;)[0] ?? \u0026#39;\u0026#39;;  }   if (!validAddresses.has(ip)) {  const tmp = {  status: 403,  url: req.url,  host: req.nextUrl.host,  };  console.log(JSON.stringify(tmp));   return new NextResponse(null, { status: 401 });  }   return NextResponse.next(); }; # .env.local  VALID_IP_ADDRESSES=127.0.0.1,::1 環境 % npx next -v Next.js v14.0.3 ","permalink":"https://d.oppara.tv/posts/2023/11/nextjs-restrict-access-by-ip-address/","summary":"対応方法 middleware を使用する。 // middleware.ts import { NextResponse, NextRequest } from \u0026#39;next/server\u0026#39;; const validAddresses = new Set(); if (process.env.VALID_IP_ADDRESSES) { process.env.VALID_IP_ADDRESSES!.split(\u0026#39;,\u0026#39;).forEach((address) =\u0026gt; { validAddresses.add(address.trim()); }) } export function middleware(req: NextRequest) { let ip: string = req.ip ?? req.headers.get(\u0026#39;x-real-ip\u0026#39;) ?? \u0026#39;\u0026#39;; // with CDN or LB or next dev if (!ip \u0026amp;\u0026amp; req.headers.get(\u0026#39;x-forwarded-for\u0026#39;)) { ip = req.headers.get(\u0026#39;x-forwarded-for\u0026#39;)?.split(\u0026#39;,\u0026#39;)[0] ?? \u0026#39;\u0026#39;; } if (!validAddresses.has(ip)) {","title":"Next.js で IP アドレスを使用したアクセス制限を行う"},{"content":"はじめに ログローテートの dry-run、実行方法についての覚書。\nUsage dry-run 実行\nlogrotate -d /etc/logrotate.conf 実行\nlogrotate -f /etc/logrotate.conf 設定ファイルを指定して実行\nlogrotate -f /etc/logrotate.d/httpd ","permalink":"https://d.oppara.tv/posts/2023/11/logrotate/","summary":"はじめに ログローテートの dry-run、実行方法についての覚書。 Usage dry-run 実行 logrotate -d /etc/logrotate.conf 実行 logrotate -f /etc/logrotate.conf 設定ファイルを指定して実行 logrotate -f /etc/logrotate.d/httpd","title":"ログローテートの覚書"},{"content":"はじめに textlint の dry-run をよく忘れるので覚書。 そもそもデフォルトが dry-run だった。\nUsage npx textlint /path/to/target キャッシュなし、設定ファイル指定の場合。\nnpx textlint --no-cache -c /path/to/textlintrc /path/to/target 自動修正時の場合。\nnpx textlint --dry-run --fix /path/to/target 環境 % npx textlint --version v13.3.3 % sw_vers ProductName:\tmacOS ProductVersion:\t14.0 BuildVersion:\t23A344 ","permalink":"https://d.oppara.tv/posts/2023/10/textlint-dryrun/","summary":"はじめに textlint の dry-run をよく忘れるので覚書。 そもそもデフォルトが dry-run だった。 Usage npx textlint /path/to/target キャッシュなし、設定ファイル指定の場合。 npx textlint --no-cache -c /path/to/textlintrc /path/to/target 自動修正時の場","title":"textlint で dry run"},{"content":"はじめに 便利そうなので使ってみる。\n orangekame3/stree: 📁Directory trees of AWS S3 Bucket stree：S3バケットをtreeするCLIコマンド | フューチャー技術ブログ  インストール Homebrew でインストールする。\n% brew install orangekame3/tap/stree ちょい、はまる。 % stree my-bucket ignoring argument my-bucket (path check I) No Git or Mercurial URLs found in arguments or current working path, see stree --help は？\n% which stree /opt/homebrew/bin/stree % ll /opt/homebrew/bin | grep stree lrwxr-xr-x 1 oppara admin 53B Oct 28 2022 stree -\u0026gt; /Applications/Sourcetree.app/Contents/Resources/stree Sourcetree の CLI がインストールされていたので削除する。\n% rm /opt/homebrew/bin/stree 設定 config と credentials をよしなに設定する。\n~/.aws/config\n[oppara] region = ap-northeast-1 output = json ~/.aws/credentials\n[oppara] aws_access_key_id = XXXXXXXXXXXXXXXXXXXXX aws_secret_access_key = XXXXXXXXXXXXXXXXX 実行 % stree opp-my-bucket --profile oppara --no-color opp-my-bucket ├── foo │ └── bar │ └── baz.toml └── hoge.md 2 directories, 2 files 環境 % sw_vers ProductName:\tmacOS ProductVersion:\t14.0 BuildVersion:\t23A344 ","permalink":"https://d.oppara.tv/posts/2023/10/aws-s3-stree/","summary":"はじめに 便利そうなので使ってみる。 orangekame3/stree: 📁Directory trees of AWS S3 Bucket stree：S3バケットをtreeするCLIコマンド | フューチャー技術ブロ","title":"stree を使ってみる"},{"content":"はじめに 簡易敵な Usage 表示\n実装 #!/usr/bin/env bash #/ Usage: #/ awsome-script [-h | -help] \u0026lt;name\u0026gt; [\u0026lt;count\u0026gt;] #/ #/ Example #/ awsome-script foo #/ awsome-script foo 3 #/  set -e  usage () {  grep \u0026#39;^#/\u0026#39; \u0026lt; \u0026#34;$0\u0026#34; | cut -c4-  exit 0 }  if [ \u0026#34;$1\u0026#34; = \u0026#34;--help\u0026#34; ] || [ \u0026#34;$1\u0026#34; = \u0026#34;-h\u0026#34; ]; then  usage fi  NAME=$1 COUNT=${2:-0}  echo \u0026#34;$NAME\u0026#34; \u0026#34;$COUNT\u0026#34; 実行 % /path/to/awsome-script -h Usage: awsome-script [-h | -help] \u0026lt;name\u0026gt; [\u0026lt;count\u0026gt;] Example awsome-script foo awsome-script foo 3 % /path/to/awsome-script foo foo 0 ","permalink":"https://d.oppara.tv/posts/2023/10/shellscript-usage/","summary":"はじめに 簡易敵な Usage 表示 実装 #!/usr/bin/env bash #/ Usage: #/ awsome-script [-h | -help] \u0026lt;name\u0026gt; [\u0026lt;count\u0026gt;] #/ #/ Example #/ awsome-script foo #/ awsome-script foo 3 #/ set -e usage () { grep \u0026#39;^#/\u0026#39; \u0026lt; \u0026#34;$0\u0026#34; | cut -c4- exit 0 } if [ \u0026#34;$1\u0026#34; = \u0026#34;--help\u0026#34; ] || [ \u0026#34;$1\u0026#34; = \u0026#34;-h\u0026#34; ]; then usage fi NAME=$1 COUNT=${2:-0} echo \u0026#34;$NAME\u0026#34; \u0026#34;$COUNT\u0026#34;","title":"シェルスクリプトで Usage 表示"},{"content":"主要な項目の説明  myhostname：DNS で正引きできる（A レコードが存在する）ホスト名。\nDNS 正引きの IP アドレスと、Postfix を設定するサーバの IP アドレスが一致する必要はない！ mydomain：ドメイン名を FQDN で指定 myorigin：アプリケーションからのメール送信時に From アドレスのドメインとして使用する名前  最終的に、myorigin に設定するドメインに、逆引き、SPF レコードの設定が必要。\n設定例 myhostname = mail01.example.com mydomain = example.com myorigin = $mydomain mydestination = コマンド main.cf の確認 # postfix check 再起動 # service postfix restart ","permalink":"https://d.oppara.tv/posts/2023/10/postfix-setting/","summary":"主要な項目の説明 myhostname：DNS で正引きできる（A レコードが存在する）ホスト名。 DNS 正引きの IP アドレスと、Postfix を設定する","title":"Postfix 覚書"},{"content":"www ありの https のURLに統一 RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L] RewriteCond %{HTTP_HOST} !^www\\. [NC] RewriteRule ^(.*)$ http://www.%{HTTP_HOST}/$1 [R=301,L] www なしの https のURLに統一 RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L] RewriteCond %{HTTP_HOST} ^www\\.(.*) [NC] RewriteRule ^ http://%1%{REQUEST_URI} [L,R=301] ","permalink":"https://d.oppara.tv/posts/2023/09/rewrite-rule-www/","summary":"www ありの https のURLに統一 RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L] RewriteCond %{HTTP_HOST} !^www\\. [NC] RewriteRule ^(.*)$ http://www.%{HTTP_HOST}/$1 [R=301,L] www なしの https のURLに統一 RewriteEngine on RewriteCond %{HTTPS} off RewriteRule ^(.*)$ https://%{HTTP_HOST}%{REQUEST_URI} [R=301,L] RewriteCond %{HTTP_HOST} ^www\\.(.*) [NC] RewriteRule ^ http://%1%{REQUEST_URI} [L,R=301]","title":"www ありなしの RewiteRule"},{"content":"目的 WordPress の管理画面で独自プラグインの URL を取得したい。\n対応方法  funtcion getPluginUrl() {  return admin_url(\u0026#39;admin.php?page=\u0026#39; . プラグインのスラッグ); } ","permalink":"https://d.oppara.tv/posts/2023/07/wp-admin-plugin-url/","summary":"目的 WordPress の管理画面で独自プラグインの URL を取得したい。 対応方法 funtcion getPluginUrl() { return admin_url(\u0026#39;admin.php?page=\u0026#39; . プラグインのスラッグ); }","title":"WordPress の管理画面でプラグインの URL を取得する"},{"content":"問題 WordPress でスラッグにスラッシュを含ませられない。\nスラッシュがハイフンに変換されてしまう。。。\n対応方法 sanitize_title_with_dashes という関数でフィルタしてるので削除する。\nただし、フィルタを削除すると、URI エンコード されなくなるので自前でエンコードする。\nremove_filter(\u0026#39;sanitize_title\u0026#39;, \u0026#39;sanitize_title_with_dashes\u0026#39;);  // URI エンコードを行う add_filter(\u0026#39;sanitize_title\u0026#39;, function ($title) {  if (seems_utf8($title)) {  if (function_exists(\u0026#39;mb_strtolower\u0026#39;)) {  $title = mb_strtolower($title, \u0026#39;UTF-8\u0026#39;);  }  $title = utf8_uri_encode($title, 200);  }   return $title; }); ","permalink":"https://d.oppara.tv/posts/2023/05/wp-slug-with-slash/","summary":"問題 WordPress でスラッグにスラッシュを含ませられない。 スラッシュがハイフンに変換されてしまう。。。 対応方法 sanitize_title_with_dashes という関数でフィルタしてるので削除する。","title":"WordPress でスラッグにスラッシュを含ませたい"},{"content":"問題 自分で作成したテーマを使用した場合、サイドメニュー -\u0026gt; 外観メニュー内に「メニュー」が表示されない。\n対応方法 add_action(\u0026#39;after_setup_theme\u0026#39;, function(): void {  register_nav_menu(\u0026#39;primary\u0026#39;, __(\u0026#39;Primary Menu\u0026#39;, \u0026#39;theme-slug\u0026#39;)); }); ","permalink":"https://d.oppara.tv/posts/2023/05/wp-themes-menu/","summary":"問題 自分で作成したテーマを使用した場合、サイドメニュー -\u0026gt; 外観メニュー内に「メニュー」が表示されない。 対応方法 add_action(\u0026#39;after_setup_theme\u0026#39;, function(): void { register_nav_menu(\u0026#39;primary\u0026#39;, __(\u0026#39;Primary Menu\u0026#39;, \u0026#39;theme-slug\u0026#39;)); });","title":"WordPress で外観メニュー内に「メニュー」表示されない件"},{"content":"目的 よく忘れるので備忘録。\nよく使うのは ##*/, %/*\nパターン    パターン 説明     ${var#pattern} var の先頭から pattern の最短一致を削除する。   ${var##pattern} var の先頭から pattern の最長一致を削除する。   ${var%pattern} var の末尾から pattern の最短一致を削除する。   ${var%%pattern} var の末尾から pattern の最長一致を削除する。    #!/bin/sh  path=\u0026#34;/etc/httpd/httpd.conf\u0026#34;  # ファイル名 echo ${path##*/}  # ディレクトリ名 echo ${path%/*}  # 拡張子を除いたファイル名 echo ${path%.*}  # 拡張子 echo ${path##*.} ","permalink":"https://d.oppara.tv/posts/2023/05/shellscript-dirname-filename/","summary":"目的 よく忘れるので備忘録。 よく使うのは ##*/, %/* パターン パターン 説明 ${var#pattern} var の先頭から pattern の最短一致を削除する。 ${var##pattern} var の先頭から pattern の最長一致を削除する。 ${var%pattern}","title":"シェルスクリプトでディレクトリ名やファイル名を取得したい"},{"content":"目的 Neovim を使いたい。\n対応方法 Homebrew でインストールする。\nbrew install neovim 開発バージョンをインストールする。\nbrew install --HEAD neovim 開発バージョンをアップデートする。\nbrew upgrade neovim --fetch-HEAD 参考サイト  Installing Neovim · neovim/neovim Wiki  環境 % nvim --version NVIM v0.9.0 Build type: Release LuaJIT 2.1.0-beta3 % sw_vers ProductName: macOS ProductVersion: 13.3 BuildVersion: 22E252 ","permalink":"https://d.oppara.tv/posts/2023/04/neovim-install/","summary":"目的 Neovim を使いたい。 対応方法 Homebrew でインストールする。 brew install neovim 開発バージョンをインストールする。 brew install --HEAD neovim 開発バージョンをアップデートする。 brew upgrade neovim --fetch-HEAD 参","title":"Neovim のインストール"},{"content":"はじめに XDG_ほにゃららの環境変数のデフォルト値を忘れてしまうのでまとめ。\nまとめ XDG_CONFIG_HOME ユーザー個別の設定が書き込まれるディレクトリ。\necho \u0026#34;${XDG_CONFIG_HOME:-$HOME/.config}\u0026#34; XDG_DATA_HOME ユーザー個別のデータファイルが書き込まれるディレクトリ。\necho \u0026#34;${XDG_DATA_HOME:-$HOME/.share}\u0026#34; XDG_STATE_HOME ユーザー個別の状態ファイルをが書き込まれるディレクトリ。\necho \u0026#34;${XDG_STATE_HOME:-$HOME/.state}\u0026#34; XDG_CACHE_HOME ユーザー個別の重要でない (キャッシュ) データが書き込まれるディレクトリ。\necho \u0026#34;${XDG_CACHE_HOME:-$HOME/.cache}\u0026#34; 参考サイト  XDG Base Directory - ArchWiki  ","permalink":"https://d.oppara.tv/posts/2023/04/xdg-base-directory/","summary":"はじめに XDG_ほにゃららの環境変数のデフォルト値を忘れてしまうのでまとめ。 まとめ XDG_CONFIG_HOME ユーザー個別の設定が書き込まれるディレクトリ。 echo \u0026#34;${XDG_CONFIG_HOME:-$HOME/.config}\u0026#34; XDG_DATA_HOME ユー","title":"XDG Base Directory のデフォルト値まとめ"},{"content":"目的 GitLab に登録している公開鍵を手軽に取得したい。\n対応方法 GitLab のユーザーページの URL の後ろに .keys をつける。\n例  GitLab のホスト: gitlab.oppara.tv ユーザー名: oppara  % curl https://gitlab.oppara.tv/oppara.keys 参考サイト  GitHub に登録した SSH 公開鍵は全世界に公開されている | 774::Blog  % curl https://github.com/oppara.keys ","permalink":"https://d.oppara.tv/posts/2022/10/gitlab-pubkey/","summary":"目的 GitLab に登録している公開鍵を手軽に取得したい。 対応方法 GitLab のユーザーページの URL の後ろに .keys をつける。 例 GitLab のホスト: gitlab.oppara.tv ユーザー名: oppara % curl https://gitlab.oppara.tv/oppara.keys 参考サイ","title":"GitLab に登録している公開鍵を取得したい"},{"content":"目的 C++入門 AtCoder Programming Guide for beginners (APG4b) の解答を Mac 上で確認したい。\n対応方法 以下のファイルを作成して\n~/apg4b/include/bits/stdc++.h\n#include \u0026lt;iostream\u0026gt; // cout, endl, cin#include \u0026lt;string\u0026gt; // string, to_string, stoi#include \u0026lt;vector\u0026gt; // vector#include \u0026lt;algorithm\u0026gt; // min, max, swap, sort, reverse, lower_bound, upper_bound#include \u0026lt;utility\u0026gt; // pair, make_pair#include \u0026lt;tuple\u0026gt; // tuple, make_tuple#include \u0026lt;cstdint\u0026gt; // int64_t, int*_t#include \u0026lt;cstdio\u0026gt; // printf#include \u0026lt;map\u0026gt; // map#include \u0026lt;queue\u0026gt; // queue, priority_queue#include \u0026lt;set\u0026gt; // set#include \u0026lt;stack\u0026gt; // stack#include \u0026lt;deque\u0026gt; // deque#include \u0026lt;unordered_map\u0026gt; // unordered_map#include \u0026lt;unordered_set\u0026gt; // unordered_set#include \u0026lt;bitset\u0026gt; // bitset#include \u0026lt;cctype\u0026gt; // isupper, islower, isdigit, toupper, tolowerパスに追加しておく。\nexport CPLUS_INCLUDE_PATH=$CPLUS_INCLUDE_PATH:${HOME}/apg4b/include/ 実行 quickrun で実行！\n  参考サイト  手元のコンピュータでプログラムを書きたい場合  環境 % sw_vers ProductName: macOS ProductVersion: 12.4 BuildVersion: 21F79 % clang --version Apple clang version 13.1.6 (clang-1316.0.21.2.5) Target: arm64-apple-darwin21.5.0 Thread model: posix InstalledDir: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin ","permalink":"https://d.oppara.tv/posts/2022/09/apgb-mac/","summary":"目的 C++入門 AtCoder Programming Guide for beginners (APG4b) の解答を Mac 上で確認したい。 対応方法 以下のファイルを作成して ~/apg4b/include/bits/stdc++.h #include \u0026lt;iostream\u0026gt; // cout, endl, cin#include \u0026lt;string\u0026gt; // string, to_string, stoi#include \u0026lt;vector\u0026gt; // vector#include \u0026lt;algorithm\u0026gt; // min, max, swap, sort, reverse, lower_bound, upper_bound#include \u0026lt;utility\u0026gt; // pair, make_pair#include","title":"APG4b を Mac  上で確認したい"},{"content":"問題 Mac で会社の VPN 設定をしても、IP アドレスが会社のものに切り替わらない。\n対応方法  「システム環境設定」 -\u0026gt; 「ネットワーク」で設定した VPN 設定の [詳細\u0026hellip;] ボタンをクリック 「オプション」タブ内の「すべてのトラフィックを VPN 接続経由で送信」をチェック  環境 % sw_vers ProductName: macOS ProductVersion: 12.4 BuildVersion: 21F79 ","permalink":"https://d.oppara.tv/posts/2022/09/mac-vpn/","summary":"問題 Mac で会社の VPN 設定をしても、IP アドレスが会社のものに切り替わらない。 対応方法 「システム環境設定」 -\u0026gt; 「ネットワーク」で設定した VPN 設定の [詳","title":"VPN 接続しても IP アドレスが変わらない件"},{"content":"やり方 aws-vault を利用し、EC2 のセキュリティスキャンを行う場合。\n% aws-vault exec opp-dev -- trivy aws --service ec2 ヘルプ % trivy aws --help 参考サイト  TrivyでAWSアカウントのセキュリティスキャンができるようになりました | DevelopersIO  環境 % sw_vers ProductName: macOS ProductVersion: 12.4 BuildVersion: 21F79 % trivy --version Version: 0.31.2 ","permalink":"https://d.oppara.tv/posts/2022/08/aws-trivy/","summary":"やり方 aws-vault を利用し、EC2 のセキュリティスキャンを行う場合。 % aws-vault exec opp-dev -- trivy aws --service ec2 ヘルプ % trivy aws --help 参考サイト TrivyでAWSアカウントのセキュリテ","title":"Trivy で AWS のセキュリティスキャンを行う"},{"content":"目的 DynamoDB をローカル環境で使いたい。\n対応方法 DynamoDB ローカルを Docker で動かす\nversion: \u0026#39;3.8\u0026#39; services:  dynamodb-local:  command: \u0026#34;-jar DynamoDBLocal.jar -sharedDb -dbPath ./data\u0026#34;  image: \u0026#34;amazon/dynamodb-local:latest\u0026#34;  container_name: dynamodb-local  ports:  - \u0026#34;8888:8000\u0026#34;  volumes:  - \u0026#34;./docker/dynamodb:/home/dynamodblocal/data\u0026#34;  working_dir: /home/dynamodblocal 起動 % docker-compose up -d テーブルを作成してみる % export AWS_DEFAULT_REGION=us-west-2 % export ENDPOINT=\u0026#34;http://localhost:8888\u0026#34; % aws dynamodb create-table \\  --table-name sessions \\  --endpoint-url \u0026#34;${ENDPOINT}\u0026#34; \\  --attribute-definitions \\  AttributeName=id,AttributeType=S \\  --key-schema \\  AttributeName=id,KeyType=HASH \\  --billing-mode PAY_PER_REQUEST \\  --table-class STANDARD 環境 % sw_vers ProductName: macOS ProductVersion: 12.4 BuildVersion: 21F79 ","permalink":"https://d.oppara.tv/posts/2022/06/aws-dynamodb-local/","summary":"目的 DynamoDB をローカル環境で使いたい。 対応方法 DynamoDB ローカルを Docker で動かす version: \u0026#39;3.8\u0026#39; services: dynamodb-local: command: \u0026#34;-jar DynamoDBLocal.jar -sharedDb -dbPath ./data\u0026#34; image: \u0026#34;amazon/dynamodb-local:latest\u0026#34; container_name: dynamodb-local ports: - \u0026#34;8888:8000\u0026#34; volumes: - \u0026#34;./docker/dynamodb:/home/dynamodblocal/data\u0026#34; working_dir: /home/dynamodblocal 起動 % docker-compose up -d テーブルを作成してみる","title":"DynamoDB をローカル環境で使いたい"},{"content":"はじめに Wrangler（Workers CLI）を使って Cloudflare Workers を試してみる。\nWrangler のインストール % npm install -g wrangler Cloudflare の認証 2 段階認証にもたもたしてたらタイムアウトしてしまった。\n% wrangler login  ⛅️ wrangler 2.0.5 ------------------- Attempting to login via OAuth... ✘ [ERROR] Timed out waiting for authorization code, please try again. もう一度。\n% wrangler login  ⛅️ wrangler 2.0.5 ------------------- Attempting to login via OAuth... ブラウザが起動し、ログイン、2 段階認証を通過すると以下の画面になるので、問題なければ[Allow]をクリック。   承認。   プロジェクトの作成 % wrangler init my-worker -y 中身確認。\n% ls -1F my-worker node_modules/ package-lock.json package.json src/ tsconfig.json wrangler.toml % cat my-worker/src/index.ts /**  * Welcome to Cloudflare Workers! This is your first worker.  *  * - Run `wrangler dev src/index.ts` in your terminal to start a development server  * - Open a browser tab at http://localhost:8787/ to see your worker in action  * - Run `wrangler publish src/index.ts --name my-worker` to publish your worker  *  * Learn more at https://developers.cloudflare.com/workers/  */ export default {  async fetch(request: Request): Promise\u0026lt;Response\u0026gt; {  return new Response(\u0026#34;Hello World!\u0026#34;);  }, }; ローカルで実行 % cd my-worker % wrangler dev # または npm start \u0026gt; my-worker@0.0.0 start \u0026gt; wrangler dev  ⛅️ wrangler 2.0.5 ------------------- ⬣ Listening at http://localhost:59598 ╭────────────────────────────────────────────╮ │ [b] open a browser, [d] open Devtools, [l] turn off local mode, [c] clear console, [x] to exit │ ╰────────────────────────────────────────────╯ デプロイ % wrangler publish # または npm run publish  ⛅️ wrangler 2.0.5 ------------------- Uploaded my-worker (0.61 sec) Published my-worker (3.61 sec)  my-worker.oppara.workers.dev 動作確認 % curl https://my-worker.oppara.workers.dev Hello World! ログが見れる。\n% wrangler tail  ⛅️ wrangler 2.0.5 ------------------- Successfully created tail, expires at 2022-05-17T20:19:21Z Connected to my-worker, waiting for logs... GET https://my-worker.oppara.workers.dev/ - Ok @ 5/17/2022, 11:19:47 PM 参考サイト  Wrangler (command line) · Cloudflare Workers docs Get started guide · Cloudflare Workers docs  環境 % wrangler --version 2.0.5 % sw_vers ProductName: macOS ProductVersion: 12.3.1 BuildVersion: 21E258 ","permalink":"https://d.oppara.tv/posts/2022/05/wrangler-cloudflare-workers/","summary":"はじめに Wrangler（Workers CLI）を使って Cloudflare Workers を試してみる。 Wrangler のインストール % npm install -g wrangler Cloudflare の認証 2 段階認証にもたもたしてたらタイ","title":"Wrangler で Cloudflare Workers"},{"content":"問題 npx 実行時にyとたたくのが面倒、もしくはたたくこと自体を忘れてしまう。\n% npx cowsay foo Need to install the following packages:  cowsay Ok to proceed? (y) 対応方法 --yesをつける。(キャッシュを有効にする?)\n% npx --yes cowsay foo  _____ \u0026lt; foo \u0026gt;  -----  \\ ^__^  \\ (oo)\\_______  (__)\\ )\\/\\  ||----w |  || || 以後、--yesをつけなくてもOk to proceed? (y)は表示されない。\n% npx cowsay foo  _____ \u0026lt; foo \u0026gt;  -----  \\ ^__^  \\ (oo)\\_______  (__)\\ )\\/\\  ||----w |  || || キャッシュをクリアすると、Ok to proceed? (y)が復活する。\n% npx --yes clear-npx-cache % npx cowsay foo Need to install the following packages:  cowsay Ok to proceed? (y)  _____ \u0026lt; foo \u0026gt;  -----  \\ ^__^  \\ (oo)\\_______  (__)\\ )\\/\\  ||----w |  || || まとめ --yes 5 文字か、y 1 文字か\u0026hellip;\n参考サイト  npx | npm Docs  環境 % npm --version 8.6.0 ","permalink":"https://d.oppara.tv/posts/2022/05/npx-not-show-ok-to-proceed/","summary":"問題 npx 実行時にyとたたくのが面倒、もしくはたたくこと自体を忘れてしまう。 % npx cowsay foo Need to install the following packages: cowsay Ok to proceed? (y) 対応方法 --yesをつける。(キャッシ","title":"npx 実行時に Ok to proceed? (y) と表示させない"},{"content":"目的 Brewfile コメント付きで上書きしたい。\nやり方 % brew bundle dump --force --describe ヘルプ表示 % brew bundle --help 環境 % brew --version Homebrew 3.4.8-11-g96e8796 Homebrew/homebrew-core (git revision 44fc63c8cca; last commit 2022-04-25) Homebrew/homebrew-cask (git revision 659584ba8c; last commit 2022-04-26) % sw_vers ProductName: macOS ProductVersion: 12.3.1 BuildVersion: 21E258 ","permalink":"https://d.oppara.tv/posts/2022/04/brew-bundle-dump/","summary":"目的 Brewfile コメント付きで上書きしたい。 やり方 % brew bundle dump --force --describe ヘルプ表示 % brew bundle --help 環境 % brew --version Homebrew 3.4.8-11-g96e8796 Homebrew/homebrew-core (git revision 44fc63c8cca; last commit 2022-04-25) Homebrew/homebrew-cask (git revision 659584ba8c; last commit 2022-04-26) % sw_vers ProductName: macOS ProductVersion: 12.3.1 BuildVersion: 21E258","title":"Brewfile を上書きしたい"},{"content":"はじめに マネコンからの再インポートが面倒くさかったので備忘録。\n対応方法 シェルスクリプトから実行する。\n#!/bin/bash set -eu  # インポートする証明書の ARN ARN=\u0026#34;arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-12345678901\t\u0026#34;  # 証明書ファイルへのパス CRT=\u0026#34;Certificate.pem\u0026#34;  # 中間証明書ファイルへのパス CC=\u0026#34;CertificateChain.pem\u0026#34;  # パスワード無しの秘密鍵へのパス KEY=\u0026#34;PrivateKey.pem\u0026#34;  # リージョン REGION=\u0026#34;us-east-1\u0026#34;  aws acm import-certificate \\  --certificate fileb://\u0026#34;${CRT}\u0026#34; \\  --certificate-chain fileb://\u0026#34;${CC}\u0026#34; \\  --private-key fileb://\u0026#34;${KEY}\u0026#34; \\  --certificate-arn \u0026#34;${ARN}\u0026#34; \\  --region \u0026#34;${REGION}\u0026#34; 参考サイト  証明書を再インポートする - AWS Certificate Manager import-certificate — AWS CLI 2.5.8 Command Reference  環境 % aws --version aws-cli/2.5.8 Python/3.9.12 Darwin/21.4.0 source/x86_64 prompt/off ","permalink":"https://d.oppara.tv/posts/2022/04/aws-acm-import-certificate/","summary":"はじめに マネコンからの再インポートが面倒くさかったので備忘録。 対応方法 シェルスクリプトから実行する。 #!/bin/bash set -eu # インポートする証明書の ARN ARN=\u0026#34;arn:aws:acm:region:123456789012:certificate/12345678-1234-1234-1234-12345678901 \u0026#34; # 証","title":"AWS CLI で証明書の再インポート"},{"content":"はじめに WP-CLI でテーブル内の文字列を置換する。\nやり方 プレフィックスがwp_のテーブル内のsearchをreplaceに置換してoutに書き出す。\n#!/bin/bash set -eu  path=\u0026#34;wp-config.php があるディレクトリまでのパス\u0026#34; search=\u0026#34;https://stg.example.com\u0026#34; replace=\u0026#34;https://www.example.com\u0026#34; out=\u0026#34;export.sql\u0026#34;  /path/to/wp search-replace --path=\u0026#34;${path}\u0026#34; \u0026#34;${search}\u0026#34; \u0026#34;${replace}\u0026#34; wp_* \\ --export=\u0026#34;${out}\u0026#34; \\ --report-changed-only \\ --all-tables-with-prefix --exportをつけない場合はテーブルのデータをじかに置換するので、実行前に--dry-runを忘れない。\n参考サイト  wp search-replace | WP-CLI Command | WordPress Developer Resources  環境 % php wp --version WP-CLI 2.6.0 ","permalink":"https://d.oppara.tv/posts/2022/04/wp-search-replace/","summary":"はじめに WP-CLI でテーブル内の文字列を置換する。 やり方 プレフィックスがwp_のテーブル内のsearchをreplaceに置換してoutに書き出す。","title":"WP-CLI でテーブル内の文字列を置換する"},{"content":"目的 mail コマンドで対話的にメールを送るのが面倒だったので備忘録。\n対応方法 % echo \u0026#34;本文\u0026#34; | mail -s \u0026#34;件名\u0026#34; -r no-replay@example.com foo@oppara.tv bar@oppara.tv 環境 $ mail -V 12.5 7/5/10 $ cat /etc/os-release NAME=\u0026#34;Rocky Linux\u0026#34; VERSION=\u0026#34;8.5 (Green Obsidian)\u0026#34; ID=\u0026#34;rocky\u0026#34; ID_LIKE=\u0026#34;rhel centos fedora\u0026#34; VERSION_ID=\u0026#34;8.5\u0026#34; PLATFORM_ID=\u0026#34;platform:el8\u0026#34; PRETTY_NAME=\u0026#34;Rocky Linux 8.5 (Green Obsidian)\u0026#34; ANSI_COLOR=\u0026#34;0;32\u0026#34; CPE_NAME=\u0026#34;cpe:/o:rocky:rocky:8:GA\u0026#34; HOME_URL=\u0026#34;https://rockylinux.org/\u0026#34; BUG_REPORT_URL=\u0026#34;https://bugs.rockylinux.org/\u0026#34; ROCKY_SUPPORT_PRODUCT=\u0026#34;Rocky Linux\u0026#34; ROCKY_SUPPORT_PRODUCT_VERSION=\u0026#34;8\u0026#34; ","permalink":"https://d.oppara.tv/posts/2022/04/mail-one-liner/","summary":"目的 mail コマンドで対話的にメールを送るのが面倒だったので備忘録。 対応方法 % echo \u0026#34;本文\u0026#34; | mail -s \u0026#34;件名\u0026#34; -r no-replay@example.com foo@oppara.tv bar@oppara.tv 環境","title":"メール送信ワンライナー"},{"content":"目的 Actions 時に呼び出すシェルスクリプト内で、Actions 時でなくてもブランチ名を利用したい。\n対応方法 #!/bin/bash set -Ceu  if [ \u0026#34;${GITHUB_REF_NAME:-UNDEF}\u0026#34; = \u0026#34;UNDEF\u0026#34; ]; then  GITHUB_REF_NAME=$(git rev-parse --abbrev-ref HEAD) fi 参考サイト  環境変数 - GitHub Docs  ","permalink":"https://d.oppara.tv/posts/2022/04/github-actions-git-branch/","summary":"目的 Actions 時に呼び出すシェルスクリプト内で、Actions 時でなくてもブランチ名を利用したい。 対応方法 #!/bin/bash set -Ceu if [ \u0026#34;${GITHUB_REF_NAME:-UNDEF}\u0026#34; = \u0026#34;UNDEF\u0026#34; ]; then GITHUB_REF_NAME=$(git rev-parse --abbrev-ref HEAD) fi 参考サイト 環","title":"GitHub Actions 時でなくてもブランチ名を利用したい"},{"content":"目的 CI 時に呼び出すシェルスクリプト内で、CI 時でなくてもブランチ名を利用したい。\n対応方法 #!/bin/bash set -Ceu  if [ \u0026#34;${CI_COMMIT_REF_NAME:-UNDEF}\u0026#34; = \u0026#34;UNDEF\u0026#34; ]; then  CI_COMMIT_REF_NAME=$(git rev-parse --abbrev-ref HEAD) fi  ## 以下の書き方は GitLab 16.0 以降使えなくなる # if [ \u0026#34;${CI_BUILD_REF_NAME:-UNDEF}\u0026#34; = \u0026#34;UNDEF\u0026#34; ]; then # CI_BUILD_REF_NAME=$(git rev-parse --abbrev-ref HEAD) # fi bash のオプション  C: リダイレクト時に既存のファイルを上書きしない。 e: コマンドがゼロ以外のステータスを返した場合、スクリプトを即座に終了する。 u: 未定義の変数を参照時にエラー。  参考サイト  Deprecations by milestone | GitLab  ","permalink":"https://d.oppara.tv/posts/2022/04/gitlab-ci-git-branch/","summary":"目的 CI 時に呼び出すシェルスクリプト内で、CI 時でなくてもブランチ名を利用したい。 対応方法 #!/bin/bash set -Ceu if [ \u0026#34;${CI_COMMIT_REF_NAME:-UNDEF}\u0026#34; = \u0026#34;UNDEF\u0026#34; ]; then CI_COMMIT_REF_NAME=$(git rev-parse --abbrev-ref HEAD) fi ## 以下の書き方は GitLab 16.0 以","title":"GitLab CI 時でなくてもブランチ名を利用したい"},{"content":"問題 Windows で rsync を使いたい。 でも WSL を使うほどでもない。\n対応方法 Git for Windows に rsync をインストールする。\n スタートメニューの「Git Bash」を右クリックして、「管理者として実行」する。 以下のシェルスクリプトを実行する。  #!/usr/bin/bash set -eu  curl -L http://repo.msys2.org/msys/x86_64/zstd-1.4.5-2-x86_64.pkg.tar.xz |tar CvxJf / - curl -L http://repo.msys2.org/msys/x86_64/rsync-3.2.2-2-x86_64.pkg.tar.zst |tar Cxvf / - --zstd curl -L http://repo.msys2.org/msys/x86_64/libzstd-1.4.5-2-x86_64.pkg.tar.xz |tar CxvJf / - curl -L http://repo.msys2.org/msys/x86_64/libxxhash-0.8.0-1-x86_64.pkg.tar.zst |tar Cvxf / - --zstd 参考サイト  Git for Windows に rsync を追加する  環境  Windows 10 21H2 (OS ビルド 19044, 1586) Git for Windows 2.35.1 rsync version 3.2.2 protocol version 31  ","permalink":"https://d.oppara.tv/posts/2022/03/windows-rsync/","summary":"問題 Windows で rsync を使いたい。 でも WSL を使うほどでもない。 対応方法 Git for Windows に rsync をインストールする。 スタートメニューの「Git Bash」を右クリックして、","title":"Windows で rsync を使いたい"},{"content":"問題 Chrome を使うとファンがうなりを上げる。\n対応方法  chrome://flags/#enhanced-bookmarks-experimentを開く。 bookmarkで検索。 以下の機能を Disabled に変更する。  Omnibox short bookmark suggestions Omnibox Bookmark Paths Omnibox Site Search Starter Pack Reading List   Chrome を再起動する。  参考サイト  2022年 重たいChromeを軽くする意外な解決方法とは？ | オランダで生きていく  環境 % /Applications/Google\\ Chrome.app/Contents/MacOS/Google\\ Chrome --version Google Chrome 99.0.4844.83 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 ","permalink":"https://d.oppara.tv/posts/2022/03/chrome-fan-solution/","summary":"問題 Chrome を使うとファンがうなりを上げる。 対応方法 chrome://flags/#enhanced-bookmarks-experimentを開","title":"Chrome を使っているとファンがうるさい"},{"content":"はじめに よく使う変数内文字列置換を忘れるのでのメモ。\n例 ~/tmp/hoge.sh\n#!/bin/bash  echo \u0026#34;$0\u0026#34;  # basename echo \u0026#34;${0##*/}\u0026#34;  # 拡張子取得 echo \u0026#34;${0##*\\.}\u0026#34;  # dirname echo \u0026#34;${0%/*}\u0026#34;  # 拡張子以外 echo \u0026#34;${0%.*}\u0026#34; output\n/Users/oppara/tmp/hoge.sh hoge.sh sh /Users/oppara/tmp /Users/oppara/tmp/hoge 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21) Copyright (C) 2007 Free Software Foundation, Inc. ","permalink":"https://d.oppara.tv/posts/2022/03/bash-string-replacement/","summary":"はじめに よく使う変数内文字列置換を忘れるのでのメモ。 例 ~/tmp/hoge.sh #!/bin/bash echo \u0026#34;$0\u0026#34; # basename echo \u0026#34;${0##*/}\u0026#34; # 拡張子取得 echo \u0026#34;${0##*\\.}\u0026#34; # dirname echo \u0026#34;${0%/*}\u0026#34; # 拡張子以外 echo \u0026#34;${0%.*}\u0026#34; output /Users/oppara/tmp/hoge.sh hoge.sh sh /Users/oppara/tmp /Users/oppara/tmp/hoge 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion:","title":"Bash 変数文字列置換"},{"content":"問題 マークダウンを PDF に変換しようとすると以下のエラー。\n% pandoc hoge.md -o hoge.pdf pandoc: pdflatex: createProcess: posix_spawnp: illegal operation (Inappropriate ioctl for device) 対応方法 wkhtmltopdf を使ってみる。\nwkhtmltopdf のインストール。\n% brew install --cask wkhtmltopdf マークダウンを PDF に変換する。\n% pandoc hoge.md -o hoge.pdf --pdf-engine wkhtmltopdf 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % pandoc --version pandoc 2.17.1.1 ","permalink":"https://d.oppara.tv/posts/2022/03/pandoc-markdown-pdf-error/","summary":"問題 マークダウンを PDF に変換しようとすると以下のエラー。 % pandoc hoge.md -o hoge.pdf pandoc: pdflatex: createProcess: posix_spawnp: illegal operation (Inappropriate ioctl for device) 対応方法 wkhtmltopdf を使ってみる。 wkhtmltopdf のインストール。 % brew install --cask wkhtmltopdf マー","title":"Pandoc マークダウンを PDF に変換しようとしてエラー"},{"content":"はじめに AWS CLI で AWS Backup を利用した EC2 のバックアップ設定の備忘録。\nデフォルトのロールの作成 1 つもバックアッププランがない状態で、cli 経由でバックリソースを作成した場合、デフォルトのロール ( AWSBackupDefaultServiceRole ) は自動で作成されないので注意。\n（マネコンからバックアップリソース作成時、IAM ロールで「デフォルトのロール」を選択した場合はデフォルトのロールが作成される）\nロール作成用のシェルスクリプト  名前: AWSBackupDefaultServiceRole 信頼されたエンティティAWS のサービス: backup.amazonaws.com ポリシー:  AWSBackupServiceRolePolicyForRestores AWSBackupServiceRolePolicyForBackup    表示 #!/bin/bash set -eu  ROLE_NAME=\u0026#34;AWSBackupDefaultServiceRole\u0026#34;  # IAM ロールを作成 aws iam create-role \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --assume-role-policy-document file://backup-role-policy.json  # AWSBackupServiceRolePolicyForBackup ポリシーをアタッチ aws iam attach-role-policy \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --policy-arn arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup  # AWSBackupServiceRolePolicyForRestores ポリシーをアタッチ aws iam attach-role-policy \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --policy-arn arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores  # EC2 のバックアップをする場合、以下のインラインポリシーを追加する必要あり aws iam put-role-policy \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --policy-name ec2-backup-policy \\ --policy-document file://ec2-backup-policy.json backup-role-policy.json\n{  \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,  \u0026#34;Statement\u0026#34;: [  {  \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,  \u0026#34;Principal\u0026#34;: {  \u0026#34;Service\u0026#34;: \u0026#34;backup.amazonaws.com\u0026#34;  },  \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;  }  ] } ec2-backup-policy.json\n{  \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,  \u0026#34;Statement\u0026#34;: [  {  \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,  \u0026#34;Action\u0026#34;: \u0026#34;ec2:DescribeFastSnapshotRestores\u0026#34;,  \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;  },  {  \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,  \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;,  \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;アカウントID\u0026gt;:role/service-role/AWSBackupDefaultServiceRole\u0026#34;  }  ] }  \nEC2 バックアップの CLI 実行例 前提: デフォルトのロール ( AWSBackupDefaultServiceRole ) は作成済み。\n1. バックアップボールトを作成 % aws backup create-backup-vault \\  --backup-vault-name \u0026lt;バックアップボールト名\u0026gt; \\  --encryption-key-arn \u0026lt;サーバー側で暗号化する際の KMS の暗号化キーの ARN\u0026gt; {  \u0026#34;BackupVaultName\u0026#34;: \u0026#34;バックアップボールト名\u0026#34;,  \u0026#34;BackupVaultArn\u0026#34;: \u0026#34;作成されたバックアップボールトの ARN\u0026gt;\u0026#34;,  \u0026#34;CreationDate\u0026#34;: \u0026#34;YYYY-MM-DDThh:mm:ss+09:00\u0026#34; } 2. バックアッププランを作成 $ aws backup create-backup-plan --backup-plan file://backup-plan.json {  \u0026#34;BackupPlanId\u0026#34;: \u0026#34;作成されたバックアッププランの ID\u0026#34;,  \u0026#34;BackupPlanArn\u0026#34;: \u0026#34;作成されたバックアッププランの ARN\u0026#34;,  \u0026#34;CreationDate\u0026#34;: \u0026#34;YYYY-MM-DDThh:mm:ss+09:00\u0026#34;,  \u0026#34;VersionId\u0026#34;: \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; } backup-plan.json\n{  \u0026#34;BackupPlanName\u0026#34;: \u0026#34;\u0026lt;バックアッププラン名\u0026gt;\u0026#34;,  \u0026#34;Rules\u0026#34;: [  {  \u0026#34;RuleName\u0026#34;: \u0026#34;\u0026lt;バックアップルール名\u0026gt;\u0026#34;,  \u0026#34;TargetBackupVaultName\u0026#34;: \u0026#34;\u0026lt;作成したバックアップボールト名\u0026gt;\u0026#34;,  \u0026#34;ScheduleExpression\u0026#34;: \u0026#34;cron(3 18 ? * * *)\u0026#34;,  \u0026#34;StartWindowMinutes\u0026#34;: 120,  \u0026#34;CompletionWindowMinutes\u0026#34;: 300,  \u0026#34;Lifecycle\u0026#34;: {  \u0026#34;DeleteAfterDays\u0026#34;: 5  }  }  ] } 3. バックアップリソースの割り当て $ aws backup create-backup-selection \\  --backup-plan-id \u0026lt;作成されたバックアッププランの ID\u0026gt; \\  --backup-selection file://backup-selection.json {  \u0026#34;SelectionId\u0026#34;: \u0026#34;作成されたセレクションの ID\u0026#34;,  \u0026#34;BackupPlanId\u0026#34;: \u0026#34;作成されたバックアッププランの ID\u0026#34;,  \u0026#34;CreationDate\u0026#34;: \u0026#34;YYYY-MM-DDThh:mm:ss+09:00\u0026#34; } backup-selection.json (EC2 インスタンスをバックアップする)\n{  \u0026#34;SelectionName\u0026#34;: \u0026#34;ec2-prod\u0026#34;,  \u0026#34;IamRoleArn\u0026#34;: \u0026#34;AWSBackupDefaultServiceRole の ARN\u0026#34;,  \u0026#34;Resources\u0026#34;: [  \u0026#34;バックアップを設定する EC2 インスタンスの ID\u0026gt;\u0026#34;  ],  \u0026#34;ListOfTags\u0026#34;: [] } 参考サイト  backup — AWS CLI 2.4.27 Command Reference  環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % aws --version aws-cli/2.4.26 Python/3.9.10 Darwin/21.3.0 source/x86_64 prompt/off ","permalink":"https://d.oppara.tv/posts/2022/03/aws-backup-ec2-cli/","summary":"はじめに AWS CLI で AWS Backup を利用した EC2 のバックアップ設定の備忘録。 デフォルトのロールの作成 1 つもバックアッププランがない状態で、cli 経由でバックリ","title":"AWS CLI で AWS Backup を利用した EC2 のバックアップ設定をする"},{"content":"#!/usr/bin/env bash set -e  desc() {  while read -r line  do  set ${line}  name=${1}  ip=${2}   echo \u0026#34;${name}: ${ip}\u0026#34;  done }  aws ec2 describe-instances --filter \u0026#34;Name=instance-state-name,Values=running\u0026#34; \\  | jq -r \u0026#39;.Reservations[].Instances[] | [(.Tags[] | select(.Key==\u0026#34;Name\u0026#34;).Value), .PrivateIpAddress] | @tsv\u0026#39; \\  | desc ec2:DescribeInstancesポリシーが必要。\n環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % aws --version aws-cli/2.4.26 Python/3.9.10 Darwin/21.3.0 source/x86_64 prompt/off ","permalink":"https://d.oppara.tv/posts/2022/03/aws-ec2-describe-ipaddress/","summary":"#!/usr/bin/env bash set -e desc() { while read -r line do set ${line} name=${1} ip=${2} echo \u0026#34;${name}: ${ip}\u0026#34; done } aws ec2 describe-instances --filter \u0026#34;Name=instance-state-name,Values=running\u0026#34; \\ | jq -r \u0026#39;.Reservations[].Instances[] | [(.Tags[] | select(.Key==\u0026#34;Name\u0026#34;).Value), .PrivateIpAddress] | @tsv\u0026#39; \\ | desc ec2:DescribeInstancesポリシーが必要。 環","title":"EC2インスタンスのタグとプライベートIPアドレスを表示する"},{"content":"はじめに 変数のデフォルト値の設定をを忘れるのでのメモ。\n例 #!/bin/bash  # var には代入されない echo \u0026#34;hello ${var:-world}\u0026#34; echo \u0026#34;$var\u0026#34;  # デフォルト値を変数化するときは再代入した方が楽 var=${var:-foo} echo \u0026#34;${var}\u0026#34; output\nhello world foo 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21) Copyright (C) 2007 Free Software Foundation, Inc. ","permalink":"https://d.oppara.tv/posts/2022/03/bash-default-value/","summary":"はじめに 変数のデフォルト値の設定をを忘れるのでのメモ。 例 #!/bin/bash # var には代入されない echo \u0026#34;hello ${var:-world}\u0026#34; echo \u0026#34;$var\u0026#34; # デフォルト値を変数化するときは再代入した方が楽 var=${var:-foo} echo","title":"Bash 変数のデフォルト値を設定する"},{"content":"はじめに AWS Vault を使って MFA 経由で AssumeRole する備忘録。\n99designs/aws-vault\n前提 以下のアカウントを作成済みでスイッチロールの設定済み。\n oppara (default): スイッチ元 (MFA 認証) oppara-dev: スイッチ先  対応方法 AWS Vault のインストール % brew cask install aws-vault AccessKeyId, SecretAccessKey をキーチェーンに登録 AWS Vault で生成するキーチェーンにアクセスする為のパスワード入力するダイアログが表示されるので設定する。\n% aws-vault add default Enter Access Key Id: xxxxxxxxxxxxxxxxxxxx Enter Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Credential が登録されている。\n% aws-vault list Profile Credentials Sessions ======= =========== ======== default default - ~/.aws/config の設定 [default] output=json region=ap-northeast-1  [profile oppara-dev] source_profile=default mfa_serial=arn:aws:iam::xxxxxxxxxxxx:mfa/oppara role_arn=arn:aws:iam::zzzzzzzzzzzz:role/\u0026lt;ロール名\u0026gt;  mfa_serial: スイッチ元アカウントの「MFA デバイスの割り当て」 role_arn: スイッチ時に使用するスイッチ先アカウントの IAM ロールの ARN  実行 oppara-dev アカウントの S3 バケット一覧を表示する。\n aws-vaultキーチェーンへアクセスする為のパスワードを入力する MFA コードを入力するよう求められるので入力する\n素の AWS CLI と違い入力したコードが表示されるので入力が楽 😆  % aws-vault exec oppara-dev -- aws s3 ls Enter MFA code for arn:aws:iam::xxxxxxxxxxxx:mfa/oppara: 2021-07-01 23:13:48 cdk-hnb659fds-assets-552376481266-ap-northeast-1 2020-06-10 00:58:26 cf-templates-8pyd86xx4vzz-ap-northeast-1 2021-05-31 01:18:49 rain-artifacts-552376481266-ap-northeast-1 セッションができている。\n% aws-vault list Profile Credentials Sessions ======= =========== ======== default default - oppara-dev - sts.AssumeRole:37m15s セッションが切れるまでは、コマンドを実行しても MFA コードの入力は求められない。\n便利 😆\n% aws-vault exec oppara-dev -- aws s3 ls 2021-07-01 23:13:48 cdk-hnb659fds-assets-552376481266-ap-northeast-1 2020-06-10 00:58:26 cf-templates-8pyd86xx4vzz-ap-northeast-1 2021-05-31 01:18:49 rain-artifacts-552376481266-ap-northeast-1 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % aws-vault --version v6.6.0 ","permalink":"https://d.oppara.tv/posts/2022/03/aws-vault-assumerole-mfa/","summary":"はじめに AWS Vault を使って MFA 経由で AssumeRole する備忘録。 99designs/aws-vault 前提 以下のアカウントを作成済みでスイッチロールの設定済み。 oppara (default): スイッチ元 (MFA 認証) oppara-dev: スイッチ先 対応","title":"AWS Vault を使って MFA と AssumeRole（スイッチロール） "},{"content":"はじめに Session Manager で EC2 上の Amazon Linux にログイン後、他のユーザーになるための備忘録。\nログイン時はssm-user\nsh-4.2$ whoami ssm-user 対応方法 ec2-user になる sh-4.2$ sudo su --login ec2-user root になる sh-4.2$ sudo su --login 環境 sh-4.2$ cat /etc/system-release Amazon Linux release 2 (Karoo) sh-4.2$ amazon-ssm-agent -version SSM Agent version: 3.0.1124.0 ","permalink":"https://d.oppara.tv/posts/2022/03/aws-ssm-switch-user/","summary":"はじめに Session Manager で EC2 上の Amazon Linux にログイン後、他のユーザーになるための備忘録。 ログイン時はssm-user sh-4.2$ whoami ssm-user 対応方法 ec2-user になる sh-4.2$ sudo su --login ec2-user root になる sh-4.2$","title":"Session Manager で Amazon Linux にログイン後ユーザーを切り替える"},{"content":"問題 git logの表示が寂しい。\n対応 好みのログを表示するエイリアスを設定する。\nGit のエイリアス ; ~/.gitconfig [alias]  ll = log --graph --color \\ --pretty=format:\u0026#39;%C(red)%x09%h %C(yellow)%cn %C(green)%ci %C(reset)%s%C(blue)%d%C(reset)\u0026#39;    format 解説     %C(red)%x09%h 9 文字空けて省略されたコミットハッシュを赤で表示   %C(yellow)%cn コミッターの名前を黄色で表示   %C(green)%ci コミットした日時を ISO8601 ぽい形式で緑で表示   %C(reset)%s 表示色をリセットし、件名（コミットメッセージの 1 行目）を表示   %C(blue)%d%C(reset) ref name を青で表示し、再度表示色をリセット    本家の解説ページ\nGit - pretty-formats Documentation\nシェルのエイリアス とりあえず、10 行だけ欲しい。\nalias gl=\u0026#34;git ll | head -10 \u0026amp;\u0026amp; echo\u0026#34; 実行結果   環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % git --version git version 2.35.1 ","permalink":"https://d.oppara.tv/posts/2022/03/git-log-alias/","summary":"問題 git logの表示が寂しい。 対応 好みのログを表示するエイリアスを設定する。 Git のエイリアス ; ~/.gitconfig [alias] ll = log --graph --color \\ --pretty=format:\u0026#39;%C(red)%x09%h %C(yellow)%cn %C(green)%ci %C(reset)%s%C(blue)%d%C(reset)\u0026#39; format 解説 %C(red)%x09%h 9 文字空けて省略さ","title":"git log のエイリアス"},{"content":"はじめに speedtest.net の CLI クライアント があったので試してみる。\nインストール % brew install teamookla/speedtest/speedtest 初回実行 初回実行時は、ライセンスの確認がある。\n% speedtest ==================================================================== You may only use this Speedtest software and information generated from it for personal, non-commercial use, through a command line interface on a personal computer. Your use of this software is subject to the End User License Agreement, Terms of Use and Privacy Policy at these URLs:  https://www.speedtest.net/about/eula  https://www.speedtest.net/about/terms  https://www.speedtest.net/about/privacy ===================================================================== Do you accept the license? [type YES to accept]: サーバ選択の詳細を表示しながら実行 % speedtest --selection-details  Speedtest by Ookla Selecting server:  20976: 6.24 ms; GLBB Japan - Tokyo  21569: 5.66 ms; i3D.net - Tokyo  38241: 5.51 ms; BudgetVM - Tokyo  28910: 212.52 ms; fdcservers.net - Tokyo  48301: 5.96 ms; Cloudflare - Tokyo  24333: 17.89 ms; Rakuten Mobile, Inc - Tokyo  44988: 7.02 ms; Misaka Network, Inc. - Tokyo  48463: 5.79 ms; IPA CyberLab 400G - Tokyo  14623: 6.14 ms; IPA CyberLab - Bunkyo  8407: 10.31 ms; Allied Telesis Capital Corporation - Sagamihara  Server: BudgetVM - Tokyo (id = 38241)  ISP: Softbank BB  Latency: 5.63 ms (0.76 ms jitter)  Download: 117.23 Mbps (data used: 124.7 MB)  Upload: 230.65 Mbps (data used: 134.4 MB) Packet Loss: 0.0%  Result URL: https://www.speedtest.net/result/c/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx サーバ ID を指定して実行 % speedtest -s 21569  Speedtest by Ookla  Server: i3D.net - Tokyo (id = 21569)  ISP: Softbank BB  Latency: 5.61 ms (0.40 ms jitter)  Download: 110.67 Mbps (data used: 69.7 MB)  Upload: 219.27 Mbps (data used: 145.6 MB) Packet Loss: 0.0%  Result URL: https://www.speedtest.net/result/c/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % speedtest -V Speedtest by Ookla 1.1.1.84 (3bdba79799) Darwin 21.3.0 x86_64 ","permalink":"https://d.oppara.tv/posts/2022/03/cli-speedtest/","summary":"はじめに speedtest.net の CLI クライアント があったので試してみる。 インストール % brew install teamookla/speedtest/speedtest 初回実行 初回実行時は、ライセンスの確認がある。 % speedtest ==================================================================== You may only use this Speedtest software and information","title":"Speedtest の CLI クライアントを試してみる"},{"content":"はじめに yaml から toml への変換ツールを探していて良さげなものを発見したので使ってみる。\n sclevine/yj: CLI - Convert between YAML, TOML, JSON, and HCL  インストール % brew install yj 使い方 標準入力から読み込ませてリダイレクトする感じ。\n% yj -yt -i \u0026lt; example.yaml \u0026gt; example.toml or\n% cat example.yaml | yj -yt -i \u0026gt; example.toml 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % yj -v v5.0.0 ","permalink":"https://d.oppara.tv/posts/2022/03/cli-yaml-toml-json-hcl-converter/","summary":"はじめに yaml から toml への変換ツールを探していて良さげなものを発見したので使ってみる。 sclevine/yj: CLI - Convert between YAML, TOML, JSON, and HCL インストール % brew install yj 使い方 標準入力から読","title":"yaml, toml, json, hclの変換ツール yj"},{"content":"DNS の設定 d.oppara.tvの CNAME をoppara.github.ioに設定する。\n% dig d.oppara.tv @8.8.8.8 ... ;; ANSWER SECTION: d.oppara.tv. 3600 IN CNAME oppara.github.io. oppara.github.io. 3600 IN A 185.199.108.153 oppara.github.io. 3600 IN A 185.199.111.153 oppara.github.io. 3600 IN A 185.199.109.153 oppara.github.io. 3600 IN A 185.199.110.153 ... GitHub Actions を設定する GitHub Actions による GitHub Pages への自動デプロイ - Qiita\n変更箇所\n pull_request:を削除 hugo のバージョンを 0.94.0 に変更 publish_dir: ./publicを削除  gh-pages ブランチの直下にデプロイする。   cname option を設定  重要 設定しないとデプロイ時に Custom domain の設定が初期化され、URL にアクセスしても 404 になってしまう。    GitHub の設定 Settings -\u0026gt; Pages\n  ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-github-pages/","summary":"DNS の設定 d.oppara.tvの CNAME をoppara.github.ioに設定する。 % dig d.oppara.tv @8.8.8.8 ... ;; ANSWER SECTION: d.oppara.tv. 3600 IN CNAME oppara.github.io. oppara.github.io. 3600 IN A 185.199.108.153 oppara.github.io. 3600 IN A 185.199.111.153 oppara.github.io. 3600 IN A 185.199.109.153 oppara.github.io. 3600","title":"Hugo で作成した記事を GitHub Pages で公開する"},{"content":"はじめに hugo vim editorで検索していたら以下の b4b4r07 さんの良さげなブログを発見。\nスムーズに Hugo でブログを書くツール | tellme.tokyo\n上記ブログで使用されている b4b4r07/blog を使用するには、以下の環境変数の設定が必要な模様。\n BLOG_ROOT: hugo new siteでできたディレクトリのパスを指定。 BLOG_POST_DIR: 記事を作成するディレクトリ。BLOG_ROOT からの相対パスを指定。  設定例 export BLOG_ROOT=\u0026#34;${HOME}/src/github.com/oppara/d.oppara.tv\u0026#34; export BLOG_POST_DIR=`date +\u0026#34;content/posts/%Y/%m\u0026#34;` blog new で作成される日付を JST にしたい The 力技。\ndiff --git a/cmd/new.go b/cmd/new.go index 4996bfb..85d597e 100644 --- a/cmd/new.go +++ b/cmd/new.go @@ -69,7 +69,7 @@ func (c *newCmd) run(args []string) error { Command: \u0026#34;hugo\u0026#34;, Args: []string{\u0026#34;new\u0026#34;, strings.TrimPrefix(next, \u0026#34;content/\u0026#34;)}, Dir: c.RootPath, - Env: map[string]string{}, + Env: map[string]string{\u0026#34;TZ\u0026#34;:\u0026#34;Asia/Tokyo\u0026#34;}, Stdin: os.Stdin, Stdout: ioutil.Discard, Stderr: ioutil.Discard, https://github.com/oppara/b4b4r07-blog/commit/1b653d83f0352d0bc06e9b1e737ec292c85989e1\n環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.94.0+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-blog-tool/","summary":"はじめに hugo vim editorで検索していたら以下の b4b4r07 さんの良さげなブログを発見。 スムーズに Hugo でブログを書くツール | tellme.tokyo 上記ブログで使用されている b4b4r07/blog","title":"スムーズに Hugo でブログを書くツール"},{"content":"問題 --editor オプション付きで hugo new すると以下のエラーになってしまう。\n% hugo new posts/2022/03/hoge/index.md --editor vim Content \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; created Editing \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; with \u0026#34;vim\u0026#34; ... Error: access denied: \u0026#34;vim\u0026#34; is not whitelisted in policy \u0026#34;security.exec.allow\u0026#34;; the current security configuration is: [security]  enableInlineShortcodes = false  [security.exec]  allow = [\u0026#39;^dart-sass-embedded$\u0026#39;, \u0026#39;^go$\u0026#39;, \u0026#39;^npx$\u0026#39;, \u0026#39;^postcss$\u0026#39;]  osEnv = [\u0026#39;(?i)^(PATH|PATHEXT|APPDATA|TMP|TEMP|TERM)$\u0026#39;]  [security.funcs]  getenv = [\u0026#39;^HUGO_\u0026#39;]  [security.http]  methods = [\u0026#39;(?i)GET|POST\u0026#39;]  urls = [\u0026#39;.*\u0026#39;] 対応方法 以下の設定を confg.toml に追加する。\n[security]  [security.exec]  allow = [\u0026#39;^vim$\u0026#39;] 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.93.3+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-with-editor/","summary":"問題 --editor オプション付きで hugo new すると以下のエラーになってしまう。 % hugo new posts/2022/03/hoge/index.md --editor vim Content \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; created Editing \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; with \u0026#34;vim\u0026#34; ... Error: access denied: \u0026#34;vim\u0026#34; is not whitelisted in policy \u0026#34;security.exec.allow\u0026#34;; the current security configuration is: [security] enableInlineShortcodes = false [security.exec] allow = [\u0026#39;^dart-sass-embedded$\u0026#39;, \u0026#39;^go$\u0026#39;, \u0026#39;^npx$\u0026#39;, \u0026#39;^postcss$\u0026#39;]","title":"--editor オプション付きで hugo new するとエラーになる"},{"content":"Configure Hugo | Hugo\n日本語周り # デフォルトの言語設定 defaultContentLanguage = \u0026#34;ja\u0026#34;  # \u0026lt;language\u0026gt; エレメント用の値 languageCode = \u0026#34;ja\u0026#34;  # 日本語の文字数を正しく数えて、短いサマリーを表示できるようにする hasCJKLanguage = true  # リスト内のタイトルを複数化しない pluralizeListTitles = false  # timezone timeZone = \u0026#34;Asia/Tokyo\u0026#34; テーマ PaperMod の設定 [Params]  # 著者名  author = \u0026#34;oppara\u0026#34;   # 日付のフォーマット  dateformat = \u0026#34;2006-01-02\u0026#34;   # リストページに表示される投稿毎の要約を非表示にする  hideSummary = true   # リストページに1つめに表示される投稿のデザインを他の投稿のデザインと同じにする  disableSpecial1stPost = true   # 投稿ページで目次を表示する  ShowToc = true   # パン屑メニューを表示する  ShowBreadCrumbs = true   # 投稿ページの下部にナビゲーションリンクを表示する  ShowPostNavLinks = true 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.93.3+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-config/","summary":"Configure Hugo | Hugo 日本語周り # デフォルトの言語設定 defaultContentLanguage = \u0026#34;ja\u0026#34; # \u0026lt;language\u0026gt; エレメント用の値 languageCode = \u0026#34;ja\u0026#34; # 日本語の文字数を正しく数えて、短いサマリーを表示できるようにする hasCJKLanguage","title":"Hugo の設定"},{"content":"はじめに Quick Start | Hugo\nとりあえずテーマをインストールしてコンテンツを表示するところまで。\nHugo のインストール % brew install hugo サイトの作成 % hugo new site d.oppara.tv テーマの追加 PaperMod というテーマを使ってみる。\n% cd d.oppara.tv % git init % git add . % git commit -m \u0026#39;feat: initial commit\u0026#39; % git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod % echo theme = \\\u0026#34;PaperMod\\\u0026#34; \u0026gt;\u0026gt; config.toml % git add . % git commit -m \u0026#39;fead: add theme\u0026#39; テーマの更新 % git submodule update --remote --merge テーマの削除 % git submodule deinit -f themes/PaperMod % git rm -f themes/PaperMod % rm -rf .git/modules/themes* コンテンツの作成 % hugo new posts/hoge.md % echo \u0026#39;hogehoge\u0026#39; \u0026gt;\u0026gt; content/posts/hoge.md .hugo_build.lockをバージョン管理外にする。\n% echo \u0026#39;.hugo_build.lock\u0026#39; \u0026gt; .gitignore % git add .gitignore % git commit -m \u0026#39;Add .gitignore\u0026#39; サーバの起動 % hugo server -D ブラウザで動作確認 % open http://localhost:1313/ 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.93.3+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-quick-start/","summary":"はじめに Quick Start | Hugo とりあえずテーマをインストールしてコンテンツを表示するところまで。 Hugo のインストール % brew install hugo サイトの作成 % hugo new site d.oppara.tv テーマの追加","title":"Hugo 事始め"}]