[{"content":"問題 マークダウンを PDF に変換しようとすると以下のエラー。\n% pandoc hoge.md -o hoge.pdf pandoc: pdflatex: createProcess: posix_spawnp: illegal operation (Inappropriate ioctl for device) 対応方法 wkhtmltopdf を使ってみる。\nwkhtmltopdf のインストール。\n% brew install --cask wkhtmltopdf マークダウンを PDF に変換する。\n% pandoc hoge.md -o hoge.pdf --pdf-engine wkhtmltopdf 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % pandoc --version pandoc 2.17.1.1 ","permalink":"https://d.oppara.tv/posts/2022/03/pandoc-markdown-pdf-error/","summary":"問題 マークダウンを PDF に変換しようとすると以下のエラー。 % pandoc hoge.md -o hoge.pdf pandoc: pdflatex: createProcess: posix_spawnp: illegal operation (Inappropriate ioctl for device) 対応方法 wkhtmltopdf を使ってみる。 wkhtmltopdf のインストール。 % brew install --cask wkhtmltopdf マー","title":"Pandoc マークダウンを PDF に変換しようとしてエラー"},{"content":"はじめに AWS CLI で AWS Backup を利用した EC2 のバックアップ設定の備忘録。\nデフォルトのロールの作成 1 つもバックアッププランがない状態で、cli 経由でバックリソースを作成した場合、デフォルトのロール ( AWSBackupDefaultServiceRole ) は自動で作成されないので注意。\n（マネコンからバックアップリソース作成時、IAM ロールで「デフォルトのロール」を選択した場合はデフォルトのロールが作成される）\nロール作成用のシェルスクリプト  名前: AWSBackupDefaultServiceRole 信頼されたエンティティAWS のサービス: backup.amazonaws.com ポリシー:  AWSBackupServiceRolePolicyForRestores AWSBackupServiceRolePolicyForBackup    表示 #!/bin/bash set -eu  ROLE_NAME=\u0026#34;AWSBackupDefaultServiceRole\u0026#34;  # IAM ロールを作成 aws iam create-role \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --assume-role-policy-document file://backup-role-policy.json  # AWSBackupServiceRolePolicyForBackup ポリシーをアタッチ aws iam attach-role-policy \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --policy-arn arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForBackup  # AWSBackupServiceRolePolicyForRestores ポリシーをアタッチ aws iam attach-role-policy \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --policy-arn arn:aws:iam::aws:policy/service-role/AWSBackupServiceRolePolicyForRestores  # EC2 のバックアップをする場合、以下のインラインポリシーを追加する必要あり aws iam put-role-policy \\ --role-name \u0026#34;${ROLE_NAME}\u0026#34; \\ --policy-name ec2-backup-policy \\ --policy-document file://ec2-backup-policy.json backup-role-policy.json\n{  \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,  \u0026#34;Statement\u0026#34;: [  {  \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,  \u0026#34;Principal\u0026#34;: {  \u0026#34;Service\u0026#34;: \u0026#34;backup.amazonaws.com\u0026#34;  },  \u0026#34;Action\u0026#34;: \u0026#34;sts:AssumeRole\u0026#34;  }  ] } ec2-backup-policy.json\n{  \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,  \u0026#34;Statement\u0026#34;: [  {  \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,  \u0026#34;Action\u0026#34;: \u0026#34;ec2:DescribeFastSnapshotRestores\u0026#34;,  \u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;  },  {  \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,  \u0026#34;Action\u0026#34;: \u0026#34;iam:PassRole\u0026#34;,  \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::\u0026lt;アカウントID\u0026gt;:role/service-role/AWSBackupDefaultServiceRole\u0026#34;  }  ] }  \nEC2 バックアップの CLI 実行例 前提: デフォルトのロール ( AWSBackupDefaultServiceRole ) は作成済み。\n1. バックアップボールトを作成 % aws backup create-backup-vault \\  --backup-vault-name \u0026lt;バックアップボールト名\u0026gt; \\  --encryption-key-arn \u0026lt;サーバー側で暗号化する際の KMS の暗号化キーの ARN\u0026gt; {  \u0026#34;BackupVaultName\u0026#34;: \u0026#34;バックアップボールト名\u0026#34;,  \u0026#34;BackupVaultArn\u0026#34;: \u0026#34;作成されたバックアップボールトの ARN\u0026gt;\u0026#34;,  \u0026#34;CreationDate\u0026#34;: \u0026#34;YYYY-MM-DDThh:mm:ss+09:00\u0026#34; } 2. バックアッププランを作成 $ aws backup create-backup-plan --backup-plan file://backup-plan.json {  \u0026#34;BackupPlanId\u0026#34;: \u0026#34;作成されたバックアッププランの ID\u0026#34;,  \u0026#34;BackupPlanArn\u0026#34;: \u0026#34;作成されたバックアッププランの ARN\u0026#34;,  \u0026#34;CreationDate\u0026#34;: \u0026#34;YYYY-MM-DDThh:mm:ss+09:00\u0026#34;,  \u0026#34;VersionId\u0026#34;: \u0026#34;xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\u0026#34; } backup-plan.json\n{  \u0026#34;BackupPlanName\u0026#34;: \u0026#34;\u0026lt;バックアッププラン名\u0026gt;\u0026#34;,  \u0026#34;Rules\u0026#34;: [  {  \u0026#34;RuleName\u0026#34;: \u0026#34;\u0026lt;バックアップルール名\u0026gt;\u0026#34;,  \u0026#34;TargetBackupVaultName\u0026#34;: \u0026#34;\u0026lt;作成したバックアップボールト名\u0026gt;\u0026#34;,  \u0026#34;ScheduleExpression\u0026#34;: \u0026#34;cron(3 18 ? * * *)\u0026#34;,  \u0026#34;StartWindowMinutes\u0026#34;: 120,  \u0026#34;CompletionWindowMinutes\u0026#34;: 300,  \u0026#34;Lifecycle\u0026#34;: {  \u0026#34;DeleteAfterDays\u0026#34;: 5  }  }  ] } 3. バックアップリソースの割り当て $ aws backup create-backup-selection \\  --backup-plan-id \u0026lt;作成されたバックアッププランの ID\u0026gt; \\  --backup-selection file://backup-selection.json {  \u0026#34;SelectionId\u0026#34;: \u0026#34;作成されたセレクションの ID\u0026#34;,  \u0026#34;BackupPlanId\u0026#34;: \u0026#34;作成されたバックアッププランの ID\u0026#34;,  \u0026#34;CreationDate\u0026#34;: \u0026#34;YYYY-MM-DDThh:mm:ss+09:00\u0026#34; } backup-selection.json (EC2 インスタンスをバックアップする)\n{  \u0026#34;SelectionName\u0026#34;: \u0026#34;ec2-prod\u0026#34;,  \u0026#34;IamRoleArn\u0026#34;: \u0026#34;AWSBackupDefaultServiceRole の ARN\u0026#34;,  \u0026#34;Resources\u0026#34;: [  \u0026#34;バックアップを設定する EC2 インスタンスの ID\u0026gt;\u0026#34;  ],  \u0026#34;ListOfTags\u0026#34;: [] } 参考サイト  backup — AWS CLI 2.4.27 Command Reference  環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % aws --version aws-cli/2.4.26 Python/3.9.10 Darwin/21.3.0 source/x86_64 prompt/off ","permalink":"https://d.oppara.tv/posts/2022/03/aws-backup-ec2-cli/","summary":"はじめに AWS CLI で AWS Backup を利用した EC2 のバックアップ設定の備忘録。 デフォルトのロールの作成 1 つもバックアッププランがない状態で、cli 経由でバックリ","title":"AWS CLI で AWS Backup を利用した EC2 のバックアップ設定をする"},{"content":"#!/usr/bin/env bash set -e  desc() {  while read -r line  do  set ${line}  name=${1}  ip=${2}   echo \u0026#34;${name}: ${ip}\u0026#34;  done }  aws ec2 describe-instances --filter \u0026#34;Name=instance-state-name,Values=running\u0026#34; \\  | jq -r \u0026#39;.Reservations[].Instances[] | [(.Tags[] | select(.Key==\u0026#34;Name\u0026#34;).Value), .PrivateIpAddress] | @tsv\u0026#39; \\  | desc ec2:DescribeInstancesポリシーが必要。\n環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % aws --version aws-cli/2.4.26 Python/3.9.10 Darwin/21.3.0 source/x86_64 prompt/off ","permalink":"https://d.oppara.tv/posts/2022/03/aws-ec2-describe-ipaddress/","summary":"#!/usr/bin/env bash set -e desc() { while read -r line do set ${line} name=${1} ip=${2} echo \u0026#34;${name}: ${ip}\u0026#34; done } aws ec2 describe-instances --filter \u0026#34;Name=instance-state-name,Values=running\u0026#34; \\ | jq -r \u0026#39;.Reservations[].Instances[] | [(.Tags[] | select(.Key==\u0026#34;Name\u0026#34;).Value), .PrivateIpAddress] | @tsv\u0026#39; \\ | desc ec2:DescribeInstancesポリシーが必要。 環","title":"EC2インスタンスのタグとプライベートIPアドレスを表示する"},{"content":"#!/bin/bash  # var には代入されない echo \u0026#34;hello ${var:-world}\u0026#34; echo \u0026#34;$var\u0026#34;  # デフォルト値を変数化するときは再代入した方が楽 var=${var:-foo} echo \u0026#34;${var}\u0026#34; output\nhello world foo 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21) Copyright (C) 2007 Free Software Foundation, Inc. ","permalink":"https://d.oppara.tv/posts/2022/03/bash-default-value/","summary":"#!/bin/bash # var には代入されない echo \u0026#34;hello ${var:-world}\u0026#34; echo \u0026#34;$var\u0026#34; # デフォルト値を変数化するときは再代入した方が楽 var=${var:-foo} echo \u0026#34;${var}\u0026#34; output hello world foo 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % bash --version GNU bash, version 3.2.57(1)-release (x86_64-apple-darwin21) Copyright (C) 2007 Free Software","title":"Bash 変数のデフォルト値を設定する"},{"content":"はじめに AWS Vault を使って MFA 経由で AssumeRole する備忘録。\n99designs/aws-vault\n前提 以下のアカウントを作成済みでスイッチロールの設定済み。\n oppara (default): スイッチ元 (MFA 認証) oppara-dev: スイッチ先  対応方法 AWS Vault のインストール % brew cask install aws-vault AccessKeyId, SecretAccessKey をキーチェーンに登録 AWS Vault で生成するキーチェーンにアクセスする為のパスワード入力するダイアログが表示されるので設定する。\n% aws-vault add default Enter Access Key Id: xxxxxxxxxxxxxxxxxxxx Enter Secret Key: xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx Credential が登録されている。\n% aws-vault list Profile Credentials Sessions ======= =========== ======== default default - ~/.aws/config の設定 [default] output=json region=ap-northeast-1  [profile oppara-dev] source_profile=default mfa_serial=arn:aws:iam::xxxxxxxxxxxx:mfa/oppara role_arn=arn:aws:iam::zzzzzzzzzzzz:role/\u0026lt;ロール名\u0026gt;  mfa_serial: スイッチ元アカウントの「MFA デバイスの割り当て」 role_arn: スイッチ時に使用するスイッチ先アカウントの IAM ロールの ARN  実行 oppara-dev アカウントの S3 バケット一覧を表示する。\n aws-vaultキーチェーンへアクセスする為のパスワードを入力する MFA コードを入力するよう求められるので入力する\n素の AWS CLI と違い入力したコードが表示されるので入力が楽 😆  % aws-vault exec oppara-dev -- aws s3 ls Enter MFA code for arn:aws:iam::xxxxxxxxxxxx:mfa/oppara: 2021-07-01 23:13:48 cdk-hnb659fds-assets-552376481266-ap-northeast-1 2020-06-10 00:58:26 cf-templates-8pyd86xx4vzz-ap-northeast-1 2021-05-31 01:18:49 rain-artifacts-552376481266-ap-northeast-1 セッションができている。\n% aws-vault list Profile Credentials Sessions ======= =========== ======== default default - oppara-dev - sts.AssumeRole:37m15s セッションが切れるまでは、コマンドを実行しても MFA コードの入力は求められない。\n便利 😆\n% aws-vault exec oppara-dev -- aws s3 ls 2021-07-01 23:13:48 cdk-hnb659fds-assets-552376481266-ap-northeast-1 2020-06-10 00:58:26 cf-templates-8pyd86xx4vzz-ap-northeast-1 2021-05-31 01:18:49 rain-artifacts-552376481266-ap-northeast-1 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % aws-vault --version v6.6.0 ","permalink":"https://d.oppara.tv/posts/2022/03/aws-vault-assumerole-mfa/","summary":"はじめに AWS Vault を使って MFA 経由で AssumeRole する備忘録。 99designs/aws-vault 前提 以下のアカウントを作成済みでスイッチロールの設定済み。 oppara (default): スイッチ元 (MFA 認証) oppara-dev: スイッチ先 対応","title":"AWS Vault を使って MFA と AssumeRole（スイッチロール） "},{"content":"はじめに Session Manager で EC2 上の Amazon Linux にログイン後、他のユーザーになるための備忘録。\nログイン時はssm-user\nsh-4.2$ whoami ssm-user 対応方法 ec2-user になる sh-4.2$ sudo su --login ec2-user root になる sh-4.2$ sudo su --login 環境 sh-4.2$ cat /etc/system-release Amazon Linux release 2 (Karoo) sh-4.2$ amazon-ssm-agent -version SSM Agent version: 3.0.1124.0 ","permalink":"https://d.oppara.tv/posts/2022/03/aws-ssm-switch-user/","summary":"はじめに Session Manager で EC2 上の Amazon Linux にログイン後、他のユーザーになるための備忘録。 ログイン時はssm-user sh-4.2$ whoami ssm-user 対応方法 ec2-user になる sh-4.2$ sudo su --login ec2-user root になる sh-4.2$","title":"Session Manager で Amazon Linux にログイン後ユーザーを切り替える"},{"content":"問題 git logの表示が寂しい。\n対応 好みのログを表示するエイリアスを設定する。\nGit のエイリアス ; ~/.gitconfig [alias]  ll = log --graph --color \\ --pretty=format:\u0026#39;%C(red)%x09%h %C(yellow)%cn %C(green)%ci %C(reset)%s%C(blue)%d%C(reset)\u0026#39;    format 解説     %C(red)%x09%h 9 文字空けて省略されたコミットハッシュを赤で表示   %C(yellow)%cn コミッターの名前を黄色で表示   %C(green)%ci コミットした日時を ISO8601 ぽい形式で緑で表示   %C(reset)%s 表示色をリセットし、件名（コミットメッセージの 1 行目）を表示   %C(blue)%d%C(reset) ref name を青で表示し、再度表示色をリセット    本家の解説ページ\nGit - pretty-formats Documentation\nシェルのエイリアス とりあえず、10 行だけ欲しい。\nalias gl=\u0026#34;git ll | head -10 \u0026amp;\u0026amp; echo\u0026#34; 実行結果   環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % git --version git version 2.35.1 ","permalink":"https://d.oppara.tv/posts/2022/03/git-log-alias/","summary":"問題 git logの表示が寂しい。 対応 好みのログを表示するエイリアスを設定する。 Git のエイリアス ; ~/.gitconfig [alias] ll = log --graph --color \\ --pretty=format:\u0026#39;%C(red)%x09%h %C(yellow)%cn %C(green)%ci %C(reset)%s%C(blue)%d%C(reset)\u0026#39; format 解説 %C(red)%x09%h 9 文字空けて省略さ","title":"git log のエイリアス"},{"content":"はじめに speedtest.net の CLI クライアント があったので試してみる。\nインストール % brew install teamookla/speedtest/speedtest 初回実行 初回実行時は、ライセンスの確認がある。\n% speedtest ==================================================================== You may only use this Speedtest software and information generated from it for personal, non-commercial use, through a command line interface on a personal computer. Your use of this software is subject to the End User License Agreement, Terms of Use and Privacy Policy at these URLs:  https://www.speedtest.net/about/eula  https://www.speedtest.net/about/terms  https://www.speedtest.net/about/privacy ===================================================================== Do you accept the license? [type YES to accept]: サーバ選択の詳細を表示しながら実行 % speedtest --selection-details  Speedtest by Ookla Selecting server:  20976: 6.24 ms; GLBB Japan - Tokyo  21569: 5.66 ms; i3D.net - Tokyo  38241: 5.51 ms; BudgetVM - Tokyo  28910: 212.52 ms; fdcservers.net - Tokyo  48301: 5.96 ms; Cloudflare - Tokyo  24333: 17.89 ms; Rakuten Mobile, Inc - Tokyo  44988: 7.02 ms; Misaka Network, Inc. - Tokyo  48463: 5.79 ms; IPA CyberLab 400G - Tokyo  14623: 6.14 ms; IPA CyberLab - Bunkyo  8407: 10.31 ms; Allied Telesis Capital Corporation - Sagamihara  Server: BudgetVM - Tokyo (id = 38241)  ISP: Softbank BB  Latency: 5.63 ms (0.76 ms jitter)  Download: 117.23 Mbps (data used: 124.7 MB)  Upload: 230.65 Mbps (data used: 134.4 MB) Packet Loss: 0.0%  Result URL: https://www.speedtest.net/result/c/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx サーバ ID を指定して実行 % speedtest -s 21569  Speedtest by Ookla  Server: i3D.net - Tokyo (id = 21569)  ISP: Softbank BB  Latency: 5.61 ms (0.40 ms jitter)  Download: 110.67 Mbps (data used: 69.7 MB)  Upload: 219.27 Mbps (data used: 145.6 MB) Packet Loss: 0.0%  Result URL: https://www.speedtest.net/result/c/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % speedtest -V Speedtest by Ookla 1.1.1.84 (3bdba79799) Darwin 21.3.0 x86_64 ","permalink":"https://d.oppara.tv/posts/2022/03/cli-speedtest/","summary":"はじめに speedtest.net の CLI クライアント があったので試してみる。 インストール % brew install teamookla/speedtest/speedtest 初回実行 初回実行時は、ライセンスの確認がある。 % speedtest ==================================================================== You may only use this Speedtest software and information","title":"Speedtest の CLI クライアントを試してみる"},{"content":"はじめに yaml から toml への変換ツールを探していて良さげなものを発見したので使ってみる。\n sclevine/yj: CLI - Convert between YAML, TOML, JSON, and HCL  インストール % brew install yj 使い方 標準入力から読み込ませてリダイレクトする感じ。\n% yj -yt -i \u0026lt; example.yaml \u0026gt; example.toml or\n% cat example.yaml | yj -yt -i \u0026gt; example.toml 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % yj -v v5.0.0 ","permalink":"https://d.oppara.tv/posts/2022/03/cli-yaml-toml-json-hcl-converter/","summary":"はじめに yaml から toml への変換ツールを探していて良さげなものを発見したので使ってみる。 sclevine/yj: CLI - Convert between YAML, TOML, JSON, and HCL インストール % brew install yj 使い方 標準入力から読","title":"yaml, toml, json, hclの変換ツール yj"},{"content":"DNS の設定 d.oppara.tvの CNAME をoppara.github.ioに設定する。\n% dig d.oppara.tv @8.8.8.8 ... ;; ANSWER SECTION: d.oppara.tv. 3600 IN CNAME oppara.github.io. oppara.github.io. 3600 IN A 185.199.108.153 oppara.github.io. 3600 IN A 185.199.111.153 oppara.github.io. 3600 IN A 185.199.109.153 oppara.github.io. 3600 IN A 185.199.110.153 ... GitHub Actions を設定する GitHub Actions による GitHub Pages への自動デプロイ - Qiita\n変更箇所\n pull_request:を削除 hugo のバージョンを 0.94.0 に変更 publish_dir: ./publicを削除  gh-pages ブランチの直下にデプロイする。   cname option を設定  重要 設定しないとデプロイ時に Custom domain の設定が初期化され、URL にアクセスしても 404 になってしまう。    GitHub の設定 Settings -\u0026gt; Pages\n  ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-github-pages/","summary":"DNS の設定 d.oppara.tvの CNAME をoppara.github.ioに設定する。 % dig d.oppara.tv @8.8.8.8 ... ;; ANSWER SECTION: d.oppara.tv. 3600 IN CNAME oppara.github.io. oppara.github.io. 3600 IN A 185.199.108.153 oppara.github.io. 3600 IN A 185.199.111.153 oppara.github.io. 3600 IN A 185.199.109.153 oppara.github.io. 3600","title":"Hugo で作成した記事を GitHub Pages で公開する"},{"content":"はじめに hugo vim editorで検索していたら以下の b4b4r07 さんの良さげなブログを発見。\nスムーズに Hugo でブログを書くツール | tellme.tokyo\n上記ブログで使用されている b4b4r07/blog を使用するには、以下の環境変数の設定が必要な模様。\n BLOG_ROOT: hugo new siteでできたディレクトリのパスを指定。 BLOG_POST_DIR: 記事を作成するディレクトリ。BLOG_ROOT からの相対パスを指定。  設定例 export BLOG_ROOT=\u0026#34;${HOME}/src/github.com/oppara/d.oppara.tv\u0026#34; export BLOG_POST_DIR=`date +\u0026#34;content/posts/%Y/%m\u0026#34;` blog new で作成される日付を JST にしたい The 力技。\ndiff --git a/cmd/new.go b/cmd/new.go index 4996bfb..85d597e 100644 --- a/cmd/new.go +++ b/cmd/new.go @@ -69,7 +69,7 @@ func (c *newCmd) run(args []string) error { Command: \u0026#34;hugo\u0026#34;, Args: []string{\u0026#34;new\u0026#34;, strings.TrimPrefix(next, \u0026#34;content/\u0026#34;)}, Dir: c.RootPath, - Env: map[string]string{}, + Env: map[string]string{\u0026#34;TZ\u0026#34;:\u0026#34;Asia/Tokyo\u0026#34;}, Stdin: os.Stdin, Stdout: ioutil.Discard, Stderr: ioutil.Discard, https://github.com/oppara/b4b4r07-blog/commit/1b653d83f0352d0bc06e9b1e737ec292c85989e1\n環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.94.0+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-blog-tool/","summary":"はじめに hugo vim editorで検索していたら以下の b4b4r07 さんの良さげなブログを発見。 スムーズに Hugo でブログを書くツール | tellme.tokyo 上記ブログで使用されている b4b4r07/blog","title":"スムーズに Hugo でブログを書くツール"},{"content":"問題 --editor オプション付きで hugo new すると以下のエラーになってしまう。\n% hugo new posts/2022/03/hoge/index.md --editor vim Content \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; created Editing \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; with \u0026#34;vim\u0026#34; ... Error: access denied: \u0026#34;vim\u0026#34; is not whitelisted in policy \u0026#34;security.exec.allow\u0026#34;; the current security configuration is: [security]  enableInlineShortcodes = false  [security.exec]  allow = [\u0026#39;^dart-sass-embedded$\u0026#39;, \u0026#39;^go$\u0026#39;, \u0026#39;^npx$\u0026#39;, \u0026#39;^postcss$\u0026#39;]  osEnv = [\u0026#39;(?i)^(PATH|PATHEXT|APPDATA|TMP|TEMP|TERM)$\u0026#39;]  [security.funcs]  getenv = [\u0026#39;^HUGO_\u0026#39;]  [security.http]  methods = [\u0026#39;(?i)GET|POST\u0026#39;]  urls = [\u0026#39;.*\u0026#39;] 対応方法 以下の設定を confg.toml に追加する。\n[security]  [security.exec]  allow = [\u0026#39;^vim$\u0026#39;] 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.93.3+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-with-editor/","summary":"問題 --editor オプション付きで hugo new すると以下のエラーになってしまう。 % hugo new posts/2022/03/hoge/index.md --editor vim Content \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; created Editing \u0026#34;/path/to/hugo/content/posts/2022/03/hoge/index.md\u0026#34; with \u0026#34;vim\u0026#34; ... Error: access denied: \u0026#34;vim\u0026#34; is not whitelisted in policy \u0026#34;security.exec.allow\u0026#34;; the current security configuration is: [security] enableInlineShortcodes = false [security.exec] allow = [\u0026#39;^dart-sass-embedded$\u0026#39;, \u0026#39;^go$\u0026#39;, \u0026#39;^npx$\u0026#39;, \u0026#39;^postcss$\u0026#39;]","title":"--editor オプション付きで hugo new するとエラーになる"},{"content":"Configure Hugo | Hugo\n日本語周り # デフォルトの言語設定 defaultContentLanguage = \u0026#34;ja\u0026#34;  # \u0026lt;language\u0026gt; エレメント用の値 languageCode = \u0026#34;ja\u0026#34;  # 日本語の文字数を正しく数えて、短いサマリーを表示できるようにする hasCJKLanguage = true  # リスト内のタイトルを複数化しない pluralizeListTitles = false  # timezone timeZone = \u0026#34;Asia/Tokyo\u0026#34; テーマ PaperMod の設定 [Params]  # 著者名  author = \u0026#34;oppara\u0026#34;   # 日付のフォーマット  dateformat = \u0026#34;2006-01-02\u0026#34;   # リストページに表示される投稿毎の要約を非表示にする  hideSummary = true   # リストページに1つめに表示される投稿のデザインを他の投稿のデザインと同じにする  disableSpecial1stPost = true   # 投稿ページで目次を表示する  ShowToc = true   # パン屑メニューを表示する  ShowBreadCrumbs = true   # 投稿ページの下部にナビゲーションリンクを表示する  ShowPostNavLinks = true 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.93.3+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-config/","summary":"Configure Hugo | Hugo 日本語周り # デフォルトの言語設定 defaultContentLanguage = \u0026#34;ja\u0026#34; # \u0026lt;language\u0026gt; エレメント用の値 languageCode = \u0026#34;ja\u0026#34; # 日本語の文字数を正しく数えて、短いサマリーを表示できるようにする hasCJKLanguage","title":"Hugo の設定"},{"content":"はじめに Quick Start | Hugo\nとりあえずテーマをインストールしてコンテンツを表示するところまで。\nHugo のインストール % brew install hugo サイトの作成 % hugo new site d.oppara.tv テーマの追加 PaperMod というテーマを使ってみる。\n% cd d.oppara.tv % git init % git add . % git commit -m \u0026#39;feat: initial commit\u0026#39; % git submodule add https://github.com/adityatelange/hugo-PaperMod.git themes/PaperMod % echo theme = \\\u0026#34;PaperMod\\\u0026#34; \u0026gt;\u0026gt; config.toml % git add . % git commit -m \u0026#39;fead: add theme\u0026#39; テーマの更新 % git submodule update --remote --merge テーマの削除 % git submodule deinit -f themes/PaperMod % git rm -f themes/PaperMod % rm -rf .git/modules/themes* コンテンツの作成 % hugo new posts/hoge.md % echo \u0026#39;hogehoge\u0026#39; \u0026gt;\u0026gt; content/posts/hoge.md .hugo_build.lockをバージョン管理外にする。\n% echo \u0026#39;.hugo_build.lock\u0026#39; \u0026gt; .gitignore % git add .gitignore % git commit -m \u0026#39;Add .gitignore\u0026#39; サーバの起動 % hugo server -D ブラウザで動作確認 % open http://localhost:1313/ 環境 % sw_vers ProductName: macOS ProductVersion: 12.2 BuildVersion: 21D49 % hugo version hugo v0.93.3+extended darwin/amd64 BuildDate=unknown ","permalink":"https://d.oppara.tv/posts/2022/03/hugo-quick-start/","summary":"はじめに Quick Start | Hugo とりあえずテーマをインストールしてコンテンツを表示するところまで。 Hugo のインストール % brew install hugo サイトの作成 % hugo new site d.oppara.tv テーマの追加","title":"Hugo 事始め"}]